/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIGRUBY
#define SWIGRUBY
#endif

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template <typename T>
class SwigValueWrapper
{
  struct SwigMovePointer
  {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) {}
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer &operator=(SwigMovePointer &rhs)
    {
      T *oldptr = ptr;
      ptr = 0;
      delete oldptr;
      ptr = rhs.ptr;
      rhs.ptr = 0;
      return *this;
    }
  } pointer;
  SwigValueWrapper &operator=(const SwigValueWrapper<T> &rhs);
  SwigValueWrapper(const SwigValueWrapper<T> &rhs);

public:
  SwigValueWrapper() : pointer(0) {}
  SwigValueWrapper &operator=(const T &t)
  {
    SwigMovePointer tmp(new T(t));
    pointer = tmp;
    return *this;
  }
  operator T &() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T>
T SwigValueInit()
{
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#define SWIGTEMPLATEDISAMBIGUATOR template
#elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#define SWIGTEMPLATEDISAMBIGUATOR template
#else
#define SWIGTEMPLATEDISAMBIGUATOR
#endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#define SWIGINLINE inline
#else
#define SWIGINLINE
#endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
#if defined(__GNUC__)
#if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#define SWIGUNUSED __attribute__((__unused__))
#else
#define SWIGUNUSED
#endif
#elif defined(__ICC)
#define SWIGUNUSED __attribute__((__unused__))
#else
#define SWIGUNUSED
#endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
#if defined(_MSC_VER)
#pragma warning(disable : 4505) /* unreferenced local function has been removed */
#endif
#endif

#ifndef SWIGUNUSEDPARM
#ifdef __cplusplus
#define SWIGUNUSEDPARM(p)
#else
#define SWIGUNUSEDPARM(p) p SWIGUNUSED
#endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
#define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
#define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#ifndef GCC_HASCLASSVISIBILITY
#define GCC_HASCLASSVISIBILITY
#endif
#endif
#endif

#ifndef SWIGEXPORT
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#if defined(STATIC_LINKED)
#define SWIGEXPORT
#else
#define SWIGEXPORT __declspec(dllexport)
#endif
#else
#if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#define SWIGEXPORT __attribute__((visibility("default")))
#else
#define SWIGEXPORT
#endif
#endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#define SWIGSTDCALL __stdcall
#else
#define SWIGSTDCALL
#endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
#define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
#define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
#define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
#pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#define SWIGTEMPLATEDISAMBIGUATOR template
#elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#define SWIGTEMPLATEDISAMBIGUATOR template
#else
#define SWIGTEMPLATEDISAMBIGUATOR
#endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#define SWIGINLINE inline
#else
#define SWIGINLINE
#endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
#if defined(__GNUC__)
#if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#define SWIGUNUSED __attribute__((__unused__))
#else
#define SWIGUNUSED
#endif
#elif defined(__ICC)
#define SWIGUNUSED __attribute__((__unused__))
#else
#define SWIGUNUSED
#endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
#if defined(_MSC_VER)
#pragma warning(disable : 4505) /* unreferenced local function has been removed */
#endif
#endif

#ifndef SWIGUNUSEDPARM
#ifdef __cplusplus
#define SWIGUNUSEDPARM(p)
#else
#define SWIGUNUSEDPARM(p) p SWIGUNUSED
#endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
#define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
#define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#ifndef GCC_HASCLASSVISIBILITY
#define GCC_HASCLASSVISIBILITY
#endif
#endif
#endif

#ifndef SWIGEXPORT
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#if defined(STATIC_LINKED)
#define SWIGEXPORT
#else
#define SWIGEXPORT __declspec(dllexport)
#endif
#else
#if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#define SWIGEXPORT __attribute__((visibility("default")))
#else
#define SWIGEXPORT
#endif
#endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#define SWIGSTDCALL __stdcall
#else
#define SWIGSTDCALL
#endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
#define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
#define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
#define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
#pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
#define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN 0x1
#define SWIG_CAST_NEW_MEMORY 0x2
#define SWIG_POINTER_NO_NULL 0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN 0x1

/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
  delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK (0)
#define SWIG_ERROR (-1)
#define SWIG_IsOK(r) (r >= 0)
#define SWIG_ArgError(r) ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK (SWIG_CASTRANKLIMIT << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ (SWIG_ERROR)
#define SWIG_OLDOBJ (SWIG_OK)
#define SWIG_NEWOBJ (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r) (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r) (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r) (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r) (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r) (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r) (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#ifndef SWIG_TypeRank
#define SWIG_TypeRank unsigned long
#endif
#ifndef SWIG_MAXCASTRANK /* Default cast allowed */
#define SWIG_MAXCASTRANK (2)
#endif
#define SWIG_CASTRANKMASK ((SWIG_CASTRANKLIMIT)-1)
#define SWIG_CastRank(r) (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r)
{
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r)
{
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#define SWIG_AddCast(r) (r)
#define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif

#include <string.h>

#ifdef __cplusplus
extern "C"
{
#endif

  typedef void *(*swig_converter_func)(void *, int *);
  typedef struct swig_type_info *(*swig_dycast_func)(void **);

  /* Structure to store information on one type */
  typedef struct swig_type_info
  {
    const char *name;            /* mangled name of this type */
    const char *str;             /* human readable name of this type */
    swig_dycast_func dcast;      /* dynamic cast function down a hierarchy */
    struct swig_cast_info *cast; /* linked list of types that can cast into this type */
    void *clientdata;            /* language specific type data */
    int owndata;                 /* flag if the structure owns the clientdata */
  } swig_type_info;

  /* Structure to store a type and conversion function used for casting */
  typedef struct swig_cast_info
  {
    swig_type_info *type;          /* pointer to type that is equivalent to this type */
    swig_converter_func converter; /* function to cast the void pointers */
    struct swig_cast_info *next;   /* pointer to next cast in linked list */
    struct swig_cast_info *prev;   /* pointer to the previous cast */
  } swig_cast_info;

  /* Structure used to store module information
   * Each module generates one structure like this, and the runtime collects
   * all of these structures and stores them in a circularly linked list.*/
  typedef struct swig_module_info
  {
    swig_type_info **types;        /* Array of pointers to swig_type_info structures that are in this module */
    size_t size;                   /* Number of types in this module */
    struct swig_module_info *next; /* Pointer to next element in circularly linked list */
    swig_type_info **type_initial; /* Array of initially generated type structures */
    swig_cast_info **cast_initial; /* Array of initially generated casting structures */
    void *clientdata;              /* Language specific module data */
  } swig_module_info;

  /*
    Compare two type names skipping the space characters, therefore
    "char*" == "char *" and "Class<int>" == "Class<int >", etc.

    Return 0 when the two name types are equivalent, as in
    strncmp, but skipping ' '.
  */
  SWIGRUNTIME int
  SWIG_TypeNameComp(const char *f1, const char *l1,
                    const char *f2, const char *l2)
  {
    for (; (f1 != l1) && (f2 != l2); ++f1, ++f2)
    {
      while ((*f1 == ' ') && (f1 != l1))
        ++f1;
      while ((*f2 == ' ') && (f2 != l2))
        ++f2;
      if (*f1 != *f2)
        return (*f1 > *f2) ? 1 : -1;
    }
    return (int)((l1 - f1) - (l2 - f2));
  }

  /*
    Check type equivalence in a name list like <name1>|<name2>|...
    Return 0 if equal, -1 if nb < tb, 1 if nb > tb
  */
  SWIGRUNTIME int
  SWIG_TypeCmp(const char *nb, const char *tb)
  {
    int equiv = 1;
    const char *te = tb + strlen(tb);
    const char *ne = nb;
    while (equiv != 0 && *ne)
    {
      for (nb = ne; *ne; ++ne)
      {
        if (*ne == '|')
          break;
      }
      equiv = SWIG_TypeNameComp(nb, ne, tb, te);
      if (*ne)
        ++ne;
    }
    return equiv;
  }

  /*
    Check type equivalence in a name list like <name1>|<name2>|...
    Return 0 if not equal, 1 if equal
  */
  SWIGRUNTIME int
  SWIG_TypeEquiv(const char *nb, const char *tb)
  {
    return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
  }

  /*
    Check the typename
  */
  SWIGRUNTIME swig_cast_info *
  SWIG_TypeCheck(const char *c, swig_type_info *ty)
  {
    if (ty)
    {
      swig_cast_info *iter = ty->cast;
      while (iter)
      {
        if (strcmp(iter->type->name, c) == 0)
        {
          if (iter == ty->cast)
            return iter;
          /* Move iter to the top of the linked list */
          iter->prev->next = iter->next;
          if (iter->next)
            iter->next->prev = iter->prev;
          iter->next = ty->cast;
          iter->prev = 0;
          if (ty->cast)
            ty->cast->prev = iter;
          ty->cast = iter;
          return iter;
        }
        iter = iter->next;
      }
    }
    return 0;
  }

  /*
    Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
  */
  SWIGRUNTIME swig_cast_info *
  SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty)
  {
    if (ty)
    {
      swig_cast_info *iter = ty->cast;
      while (iter)
      {
        if (iter->type == from)
        {
          if (iter == ty->cast)
            return iter;
          /* Move iter to the top of the linked list */
          iter->prev->next = iter->next;
          if (iter->next)
            iter->next->prev = iter->prev;
          iter->next = ty->cast;
          iter->prev = 0;
          if (ty->cast)
            ty->cast->prev = iter;
          ty->cast = iter;
          return iter;
        }
        iter = iter->next;
      }
    }
    return 0;
  }

  /*
    Cast a pointer up an inheritance hierarchy
  */
  SWIGRUNTIMEINLINE void *
  SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory)
  {
    return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
  }

  /*
     Dynamic pointer casting. Down an inheritance hierarchy
  */
  SWIGRUNTIME swig_type_info *
  SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr)
  {
    swig_type_info *lastty = ty;
    if (!ty || !ty->dcast)
      return ty;
    while (ty && (ty->dcast))
    {
      ty = (*ty->dcast)(ptr);
      if (ty)
        lastty = ty;
    }
    return lastty;
  }

  /*
    Return the name associated with this type
  */
  SWIGRUNTIMEINLINE const char *
  SWIG_TypeName(const swig_type_info *ty)
  {
    return ty->name;
  }

  /*
    Return the pretty name associated with this type,
    that is an unmangled type name in a form presentable to the user.
  */
  SWIGRUNTIME const char *
  SWIG_TypePrettyName(const swig_type_info *type)
  {
    /* The "str" field contains the equivalent pretty names of the
       type, separated by vertical-bar characters.  We choose
       to print the last name, as it is often (?) the most
       specific. */
    if (!type)
      return NULL;
    if (type->str != NULL)
    {
      const char *last_name = type->str;
      const char *s;
      for (s = type->str; *s; s++)
        if (*s == '|')
          last_name = s + 1;
      return last_name;
    }
    else
      return type->name;
  }

  /*
     Set the clientdata field for a type
  */
  SWIGRUNTIME void
  SWIG_TypeClientData(swig_type_info *ti, void *clientdata)
  {
    swig_cast_info *cast = ti->cast;
    /* if (ti->clientdata == clientdata) return; */
    ti->clientdata = clientdata;

    while (cast)
    {
      if (!cast->converter)
      {
        swig_type_info *tc = cast->type;
        if (!tc->clientdata)
        {
          SWIG_TypeClientData(tc, clientdata);
        }
      }
      cast = cast->next;
    }
  }
  SWIGRUNTIME void
  SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata)
  {
    SWIG_TypeClientData(ti, clientdata);
    ti->owndata = 1;
  }

  /*
    Search for a swig_type_info structure only by mangled name
    Search is a O(log #types)

    We start searching at module start, and finish searching when start == end.
    Note: if start == end at the beginning of the function, we go all the way around
    the circular list.
  */
  SWIGRUNTIME swig_type_info *
  SWIG_MangledTypeQueryModule(swig_module_info *start,
                              swig_module_info *end,
                              const char *name)
  {
    swig_module_info *iter = start;
    do
    {
      if (iter->size)
      {
        size_t l = 0;
        size_t r = iter->size - 1;
        do
        {
          /* since l+r >= 0, we can (>> 1) instead (/ 2) */
          size_t i = (l + r) >> 1;
          const char *iname = iter->types[i]->name;
          if (iname)
          {
            int compare = strcmp(name, iname);
            if (compare == 0)
            {
              return iter->types[i];
            }
            else if (compare < 0)
            {
              if (i)
              {
                r = i - 1;
              }
              else
              {
                break;
              }
            }
            else if (compare > 0)
            {
              l = i + 1;
            }
          }
          else
          {
            break; /* should never happen */
          }
        } while (l <= r);
      }
      iter = iter->next;
    } while (iter != end);
    return 0;
  }

  /*
    Search for a swig_type_info structure for either a mangled name or a human readable name.
    It first searches the mangled names of the types, which is a O(log #types)
    If a type is not found it then searches the human readable names, which is O(#types).

    We start searching at module start, and finish searching when start == end.
    Note: if start == end at the beginning of the function, we go all the way around
    the circular list.
  */
  SWIGRUNTIME swig_type_info *
  SWIG_TypeQueryModule(swig_module_info *start,
                       swig_module_info *end,
                       const char *name)
  {
    /* STEP 1: Search the name field using binary search */
    swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
    if (ret)
    {
      return ret;
    }
    else
    {
      /* STEP 2: If the type hasn't been found, do a complete search
         of the str field (the human readable name) */
      swig_module_info *iter = start;
      do
      {
        size_t i = 0;
        for (; i < iter->size; ++i)
        {
          if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
            return iter->types[i];
        }
        iter = iter->next;
      } while (iter != end);
    }

    /* neither found a match */
    return 0;
  }

  /*
     Pack binary data into a string
  */
  SWIGRUNTIME char *
  SWIG_PackData(char *c, void *ptr, size_t sz)
  {
    static const char hex[17] = "0123456789abcdef";
    const unsigned char *u = (unsigned char *)ptr;
    const unsigned char *eu = u + sz;
    for (; u != eu; ++u)
    {
      unsigned char uu = *u;
      *(c++) = hex[(uu & 0xf0) >> 4];
      *(c++) = hex[uu & 0xf];
    }
    return c;
  }

  /*
     Unpack binary data from a string
  */
  SWIGRUNTIME const char *
  SWIG_UnpackData(const char *c, void *ptr, size_t sz)
  {
    unsigned char *u = (unsigned char *)ptr;
    const unsigned char *eu = u + sz;
    for (; u != eu; ++u)
    {
      char d = *(c++);
      unsigned char uu;
      if ((d >= '0') && (d <= '9'))
        uu = (unsigned char)((d - '0') << 4);
      else if ((d >= 'a') && (d <= 'f'))
        uu = (unsigned char)((d - ('a' - 10)) << 4);
      else
        return (char *)0;
      d = *(c++);
      if ((d >= '0') && (d <= '9'))
        uu |= (unsigned char)(d - '0');
      else if ((d >= 'a') && (d <= 'f'))
        uu |= (unsigned char)(d - ('a' - 10));
      else
        return (char *)0;
      *u = uu;
    }
    return c;
  }

  /*
     Pack 'void *' into a string buffer.
  */
  SWIGRUNTIME char *
  SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz)
  {
    char *r = buff;
    if ((2 * sizeof(void *) + 2) > bsz)
      return 0;
    *(r++) = '_';
    r = SWIG_PackData(r, &ptr, sizeof(void *));
    if (strlen(name) + 1 > (bsz - (r - buff)))
      return 0;
    strcpy(r, name);
    return buff;
  }

  SWIGRUNTIME const char *
  SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name)
  {
    if (*c != '_')
    {
      if (strcmp(c, "NULL") == 0)
      {
        *ptr = (void *)0;
        return name;
      }
      else
      {
        return 0;
      }
    }
    return SWIG_UnpackData(++c, ptr, sizeof(void *));
  }

  SWIGRUNTIME char *
  SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz)
  {
    char *r = buff;
    size_t lname = (name ? strlen(name) : 0);
    if ((2 * sz + 2 + lname) > bsz)
      return 0;
    *(r++) = '_';
    r = SWIG_PackData(r, ptr, sz);
    if (lname)
    {
      strncpy(r, name, lname + 1);
    }
    else
    {
      *r = 0;
    }
    return buff;
  }

  SWIGRUNTIME const char *
  SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name)
  {
    if (*c != '_')
    {
      if (strcmp(c, "NULL") == 0)
      {
        memset(ptr, 0, sz);
        return name;
      }
      else
      {
        return 0;
      }
    }
    return SWIG_UnpackData(++c, ptr, sz);
  }

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define SWIG_UnknownError -1
#define SWIG_IOError -2
#define SWIG_RuntimeError -3
#define SWIG_IndexError -4
#define SWIG_TypeError -5
#define SWIG_DivisionByZero -6
#define SWIG_OverflowError -7
#define SWIG_SyntaxError -8
#define SWIG_ValueError -9
#define SWIG_SystemError -10
#define SWIG_AttributeError -11
#define SWIG_MemoryError -12
#define SWIG_NullReferenceError -13

#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
#undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
#undef write
#endif
#ifdef read
#undef read
#endif
#ifdef bind
#undef bind
#endif
#ifdef close
#undef close
#endif
#ifdef connect
#undef connect
#endif

/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long)(x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long)(x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
#define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
#define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
#define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
#define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
#define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
#define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
#define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
#define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
#define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
#define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
#define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
#define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
#define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
#define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif
#ifndef RTYPEDDATA_P
#define RTYPEDDATA_P(x) (TYPE(x) != T_DATA)
#endif

/*
 * The following macros are used for providing the correct type of a
 * function pointer to the Ruby C API.
 * Starting with Ruby 2.7 (corresponding to RB_METHOD_DEFINITION_DECL being
 * defined) these macros act transparently due to Ruby's moving away from
 * ANYARGS and instead employing strict function signatures.
 *
 * Note: In case of C (not C++) the macros are transparent even before
 * Ruby 2.7 due to the fact that the Ruby C API used function declarators
 * with empty parentheses, which allows for an unspecified number of
 * arguments.
 *
 * PROTECTFUNC(f) is used for the function pointer argument of the Ruby
 * C API function rb_protect().
 *
 * VALUEFUNC(f) is used for the function pointer argument(s) of Ruby C API
 * functions like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is used to typecast a C function that implements either
 * the "mark" or "free" stuff for a Ruby Data object, so that it can be
 * passed as an argument to Ruby C API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 *
 * SWIG_RUBY_VOID_ANYARGS_FUNC(f) is used for the function pointer
 * argument(s) of Ruby C API functions like rb_define_virtual_variable().
 *
 * SWIG_RUBY_INT_ANYARGS_FUNC(f) is used for the function pointer
 * argument(s) of Ruby C API functions like st_foreach().
 */
#if defined(__cplusplus) && !defined(RB_METHOD_DEFINITION_DECL)
#define PROTECTFUNC(f) ((VALUE(*)(VALUE))f)
#define VALUEFUNC(f) ((VALUE(*)(ANYARGS))f)
#define VOIDFUNC(f) ((RUBY_DATA_FUNC)f)
#define SWIG_RUBY_VOID_ANYARGS_FUNC(f) ((void (*)(ANYARGS))(f))
#define SWIG_RUBY_INT_ANYARGS_FUNC(f) ((int (*)(ANYARGS))(f))
#else
#define PROTECTFUNC(f) (f)
#define VALUEFUNC(f) (f)
#define VOIDFUNC(f) (f)
#define SWIG_RUBY_VOID_ANYARGS_FUNC(f) (f)
#define SWIG_RUBY_INT_ANYARGS_FUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) \
  do                       \
  {                        \
    StringValue(v);        \
    rb_check_safe_str(v);  \
  } while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError -100

/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE
getNullReferenceError(void)
{
  static int init = 0;
  static VALUE rb_eNullReferenceError;
  if (!init)
  {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
}

SWIGINTERN VALUE
getObjectPreviouslyDeletedError(void)
{
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted;
  if (!init)
  {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
}

SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code)
{
  VALUE type;
  switch (SWIG_code)
  {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}

/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN
const char *Ruby_Format_TypeError(const char *msg,
                                  const char *type,
                                  const char *name,
                                  const int argn,
                                  VALUE input)
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if (msg && *msg)
  {
    str = rb_str_new2(msg);
  }
  else
  {
    str = rb_str_new(NULL, 0);
  }

  str = rb_str_cat2(str, "Expected argument ");
  sprintf(buf, "%d of type ", argn - 1);
  str = rb_str_cat2(str, buf);
  str = rb_str_cat2(str, type);
  str = rb_str_cat2(str, ", but got ");
  str = rb_str_cat2(str, rb_obj_classname(input));
  str = rb_str_cat2(str, " ");
  asStr = rb_inspect(input);
  if (RSTRING_LEN(asStr) > 30)
  {
    str = rb_str_cat(str, StringValuePtr(asStr), 30);
    str = rb_str_cat2(str, "...");
  }
  else
  {
    str = rb_str_append(str, asStr);
  }

  if (name)
  {
    str = rb_str_cat2(str, "\n\tin SWIG method '");
    str = rb_str_cat2(str, name);
    str = rb_str_cat2(str, "'");
  }

  return StringValuePtr(str);
}

/* This function is called when an overloaded method fails */
SWIGINTERN
void Ruby_Format_OverloadedError(
    const int argc,
    const int maxargs,
    const char *method,
    const char *prototypes)
{
  const char *msg = "Wrong # of arguments";
  if (argc <= maxargs)
    msg = "Wrong arguments";
  rb_raise(rb_eArgError, "%s for overloaded method '%s'.\n"
                         "Possible C/C++ prototypes are:\n%s",
           msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C"
{
#endif

#if !defined(ST_DATA_T_DEFINED)
/* Needs to be explicitly included for Ruby 1.8 and earlier */
#include <st.h>
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#error sizeof(void*) is not the same as long or long long
#endif

  /* Global hash table to store Trackings from C/C++
     structs to Ruby Objects.
  */
  static st_table *swig_ruby_trackings = NULL;

  static VALUE swig_ruby_trackings_count(ID id, VALUE *var)
  {
    return SWIG2NUM(swig_ruby_trackings->num_entries);
  }

  /* Setup a hash table to store Trackings */
  SWIGRUNTIME void SWIG_RubyInitializeTrackings(void)
  {
    /* Create a hash table to store Trackings from C++
       objects to Ruby objects. */

    /* Try to see if some other .so has already created a
       tracking hash table, which we keep hidden in an instance var
       in the SWIG module.
       This is done to allow multiple DSOs to share the same
       tracking table.
    */
    VALUE trackings_value = Qnil;
    /* change the variable name so that we can mix modules
       compiled with older SWIG's - this used to be called "@__trackings__" */
    ID trackings_id = rb_intern("@__safetrackings__");
    VALUE verbose = rb_gv_get("VERBOSE");
    rb_gv_set("VERBOSE", Qfalse);
    trackings_value = rb_ivar_get(_mSWIG, trackings_id);
    rb_gv_set("VERBOSE", verbose);

    /* The trick here is that we have to store the hash table
    pointer in a Ruby variable. We do not want Ruby's GC to
    treat this pointer as a Ruby object, so we convert it to
    a Ruby numeric value. */
    if (trackings_value == Qnil)
    {
      /* No, it hasn't.  Create one ourselves */
      swig_ruby_trackings = st_init_numtable();
      rb_ivar_set(_mSWIG, trackings_id, SWIG2NUM(swig_ruby_trackings));
    }
    else
    {
      swig_ruby_trackings = (st_table *)NUM2SWIG(trackings_value);
    }

    rb_define_virtual_variable("SWIG_TRACKINGS_COUNT",
                               VALUEFUNC(swig_ruby_trackings_count),
                               SWIG_RUBY_VOID_ANYARGS_FUNC((rb_gvar_setter_t *)NULL));
  }

  /* Add a Tracking from a C/C++ struct to a Ruby object */
  SWIGRUNTIME void SWIG_RubyAddTracking(void *ptr, VALUE object)
  {
    /* Store the mapping to the global hash table. */
    st_insert(swig_ruby_trackings, (st_data_t)ptr, object);
  }

  /* Get the Ruby object that owns the specified C/C++ struct */
  SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void *ptr)
  {
    /* Now lookup the value stored in the global hash table */
    VALUE value;

    if (st_lookup(swig_ruby_trackings, (st_data_t)ptr, &value))
    {
      return value;
    }
    else
    {
      return Qnil;
    }
  }

  /* Remove a Tracking from a C/C++ struct to a Ruby object.  It
     is very important to remove objects once they are destroyed
     since the same memory address may be reused later to create
     a new object. */
  SWIGRUNTIME void SWIG_RubyRemoveTracking(void *ptr)
  {
    /* Delete the object from the hash table */
    st_delete(swig_ruby_trackings, (st_data_t *)&ptr, NULL);
  }

  /* This is a helper method that unlinks a Ruby object from its
     underlying C++ object.  This is needed if the lifetime of the
     Ruby object is longer than the C++ object. */
  SWIGRUNTIME void SWIG_RubyUnlinkObjects(void *ptr)
  {
    VALUE object = SWIG_RubyInstanceFor(ptr);

    if (object != Qnil)
    {
      // object might have the T_ZOMBIE type, but that's just
      // because the GC has flagged it as such for a deferred
      // destruction. Until then, it's still a T_DATA object.
      DATA_PTR(object) = 0;
    }
  }

  /* This is a helper method that iterates over all the trackings
     passing the C++ object pointer and its related Ruby object
     to the passed callback function. */

  /* Proxy method to abstract the internal trackings datatype */
  static int swig_ruby_internal_iterate_callback(st_data_t ptr, st_data_t obj, st_data_t meth)
  {
    ((void (*)(void *, VALUE))meth)((void *)ptr, (VALUE)obj);
    return ST_CONTINUE;
  }

  SWIGRUNTIME void SWIG_RubyIterateTrackings(void (*meth)(void *ptr, VALUE obj))
  {
    st_foreach(swig_ruby_trackings,
               SWIG_RUBY_INT_ANYARGS_FUNC(swig_ruby_internal_iterate_callback),
               (st_data_t)meth);
  }

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C"
{
#endif

  SWIGINTERN VALUE
  SWIG_Ruby_AppendOutput(VALUE target, VALUE o)
  {
    if (NIL_P(target))
    {
      target = o;
    }
    else
    {
      if (TYPE(target) != T_ARRAY)
      {
        VALUE o2 = target;
        target = rb_ary_new();
        rb_ary_push(target, o2);
      }
      rb_ary_push(target, o);
    }
    return target;
  }

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
  RUBY_EXTERN void Init_stack(VALUE *addr);
#define RUBY_INIT_STACK               \
  VALUE variable_in_this_stack_frame; \
  Init_stack(&variable_in_this_stack_frame);
#endif

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION 0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags) SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj, pptr, type, flags, own) SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags) SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own) SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype swig_ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty) SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type) SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags) SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags) SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type) SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type) SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty) SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type) SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* Runtime API */

#define SWIG_GetModule(clientdata) SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) SWIG_Ruby_SetModule(pointer)

/* Error manipulation */

#define SWIG_ErrorType(code) SWIG_Ruby_ErrorType(code)
#define SWIG_Error(code, msg) rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail goto fail

/* Ruby-specific SWIG API */

#define SWIG_InitRuntime() SWIG_Ruby_InitRuntime()
#define SWIG_define_class(ty) SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty) SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value) SWIG_Ruby_MangleStr(value)
#define SWIG_CheckConvert(value, ty) SWIG_Ruby_CheckConvert(value, ty)

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C"
{
#endif

  typedef struct
  {
    VALUE klass;
    VALUE mImpl;
    void (*mark)(void *);
    void (*destroy)(void *);
    int trackObjects;
  } swig_class;

  /* Global pointer used to keep some internal SWIG stuff */
  static VALUE _cSWIG_Pointer = Qnil;
  static VALUE swig_runtime_data_type_pointer = Qnil;

  /* Global IDs used to keep some internal SWIG stuff */
  static ID swig_arity_id = 0;
  static ID swig_call_id = 0;

  /*
    If your swig extension is to be run within an embedded ruby and has
    director callbacks, you should set -DRUBY_EMBEDDED during compilation.
    This will reset ruby's stack frame on each entry point from the main
    program the first time a virtual director function is invoked (in a
    non-recursive way).
    If this is not done, you run the risk of Ruby trashing the stack.
  */

#ifdef RUBY_EMBEDDED

#define SWIG_INIT_STACK    \
  if (!swig_virtual_calls) \
  {                        \
    RUBY_INIT_STACK        \
  }                        \
  ++swig_virtual_calls;
#define SWIG_RELEASE_STACK --swig_virtual_calls;
#define Ruby_DirectorTypeMismatchException(x) \
  rb_raise(rb_eTypeError, "%s", x);           \
  return c_result;

  static unsigned int swig_virtual_calls = 0;

#else /* normal non-embedded extension */

#define SWIG_INIT_STACK
#define SWIG_RELEASE_STACK
#define Ruby_DirectorTypeMismatchException(x) \
  throw Swig::DirectorTypeMismatchException(x);

#endif /* RUBY_EMBEDDED */

  SWIGRUNTIME VALUE
  getExceptionClass(void)
  {
    static int init = 0;
    static VALUE rubyExceptionClass;
    if (!init)
    {
      init = 1;
      rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
    }
    return rubyExceptionClass;
  }

  /* This code checks to see if the Ruby object being raised as part
     of an exception inherits from the Ruby class Exception.  If so,
     the object is simply returned.  If not, then a new Ruby exception
     object is created and that will be returned to Ruby.*/
  SWIGRUNTIME VALUE
  SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj)
  {
    VALUE exceptionClass = getExceptionClass();
    if (rb_obj_is_kind_of(obj, exceptionClass))
    {
      return obj;
    }
    else
    {
      return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
    }
  }

  /* Initialize Ruby runtime support */
  SWIGRUNTIME void
  SWIG_Ruby_InitRuntime(void)
  {
    if (_mSWIG == Qnil)
    {
      _mSWIG = rb_define_module("SWIG");
      swig_call_id = rb_intern("call");
      swig_arity_id = rb_intern("arity");
    }
  }

  /* Define Ruby class for C type */
  SWIGRUNTIME void
  SWIG_Ruby_define_class(swig_type_info *type)
  {
    char *klass_name = (char *)malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    if (NIL_P(_cSWIG_Pointer))
    {
      _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
      rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
    }
    rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
    free((void *)klass_name);
  }

  /* Create a new pointer object */
  SWIGRUNTIME VALUE
  SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
  {
    int own = flags & SWIG_POINTER_OWN;
    int track;
    char *klass_name;
    swig_class *sklass;
    VALUE klass;
    VALUE obj;

    if (!ptr)
      return Qnil;

    assert(type);
    if (type->clientdata)
    {
      sklass = (swig_class *)type->clientdata;

      /* Are we tracking this class and have we already returned this Ruby object? */
      track = sklass->trackObjects;
      if (track)
      {
        obj = SWIG_RubyInstanceFor(ptr);

        /* Check the object's type and make sure it has the correct type.
          It might not in cases where methods do things like
          downcast methods. */
        if (obj != Qnil)
        {
          VALUE value = rb_iv_get(obj, "@__swigtype__");
          const char *type_name = RSTRING_PTR(value);

          if (strcmp(type->name, type_name) == 0)
          {
            return obj;
          }
        }
      }

      /* Create a new Ruby object */
      obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark),
                             (own ? VOIDFUNC(sklass->destroy) : (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0)), ptr);

      /* If tracking is on for this class then track this object. */
      if (track)
      {
        SWIG_RubyAddTracking(ptr, obj);
      }
    }
    else
    {
      klass_name = (char *)malloc(4 + strlen(type->name) + 1);
      sprintf(klass_name, "TYPE%s", type->name);
      klass = rb_const_get(_mSWIG, rb_intern(klass_name));
      free((void *)klass_name);
      obj = Data_Wrap_Struct(klass, 0, 0, ptr);
    }
    rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));

    return obj;
  }

  /* Create a new class instance (always owned) */
  SWIGRUNTIME VALUE
  SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
  {
    VALUE obj;
    swig_class *sklass = (swig_class *)type->clientdata;
    obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
    rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
    return obj;
  }

  /* Get type mangle from class name */
  SWIGRUNTIMEINLINE char *
  SWIG_Ruby_MangleStr(VALUE obj)
  {
    VALUE stype = rb_iv_get(obj, "@__swigtype__");
    if (NIL_P(stype))
      return NULL;
    return StringValuePtr(stype);
  }

  /* Acquire a pointer value */
  typedef struct
  {
    void (*datafree)(void *);
    int own;
  } swig_ruby_owntype;

  SWIGRUNTIME swig_ruby_owntype
  SWIG_Ruby_AcquirePtr(VALUE obj, swig_ruby_owntype own)
  {
    swig_ruby_owntype oldown = {0, 0};
    if (TYPE(obj) == T_DATA && !RTYPEDDATA_P(obj))
    {
      oldown.datafree = RDATA(obj)->dfree;
      RDATA(obj)->dfree = own.datafree;
    }
    return oldown;
  }

  /* Convert a pointer value */
  SWIGRUNTIME int
  SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, swig_ruby_owntype *own)
  {
    char *c;
    swig_cast_info *tc;
    void *vptr = 0;

    /* Grab the pointer */
    if (NIL_P(obj))
    {
      if (ptr)
        *ptr = 0;
      return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
    }
    else
    {
      if (TYPE(obj) != T_DATA || (TYPE(obj) == T_DATA && RTYPEDDATA_P(obj)))
      {
        return SWIG_ERROR;
      }
      Data_Get_Struct(obj, void, vptr);
    }

    if (own)
    {
      own->datafree = RDATA(obj)->dfree;
      own->own = 0;
    }

    /* Check to see if the input object is giving up ownership
       of the underlying C struct or C++ object.  If so then we
       need to reset the destructor since the Ruby object no
       longer owns the underlying C++ object.*/
    if (flags & SWIG_POINTER_DISOWN)
    {
      /* Is tracking on for this class? */
      int track = 0;
      if (ty && ty->clientdata)
      {
        swig_class *sklass = (swig_class *)ty->clientdata;
        track = sklass->trackObjects;
      }

      if (track)
      {
        /* We are tracking objects for this class.  Thus we change the destructor
         * to SWIG_RubyRemoveTracking.  This allows us to
         * remove the mapping from the C++ to Ruby object
         * when the Ruby object is garbage collected.  If we don't
         * do this, then it is possible we will return a reference
         * to a Ruby object that no longer exists thereby crashing Ruby. */
        RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
      }
      else
      {
        RDATA(obj)->dfree = 0;
      }
    }

    /* Do type-checking if type info was provided */
    if (ty)
    {
      if (ty->clientdata)
      {
        if (rb_obj_is_kind_of(obj, ((swig_class *)(ty->clientdata))->klass))
        {
          if (vptr == 0)
          {
            /* The object has already been deleted */
            return SWIG_ObjectPreviouslyDeletedError;
          }
        }
      }
      if ((c = SWIG_MangleStr(obj)) == NULL)
      {
        return SWIG_ERROR;
      }
      tc = SWIG_TypeCheck(c, ty);
      if (!tc)
      {
        return SWIG_ERROR;
      }
      else
      {
        if (ptr)
        {
          if (tc->type == ty)
          {
            *ptr = vptr;
          }
          else
          {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY)
            {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                own->own = own->own | SWIG_CAST_NEW_MEMORY;
            }
          }
        }
      }
    }
    else
    {
      if (ptr)
        *ptr = vptr;
    }

    return SWIG_OK;
  }

  /* Check convert */
  SWIGRUNTIMEINLINE int
  SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
  {
    char *c = SWIG_MangleStr(obj);
    if (!c)
      return 0;
    return SWIG_TypeCheck(c, ty) != 0;
  }

  SWIGRUNTIME VALUE
  SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type)
  {
    char result[1024];
    char *r = result;
    if ((2 * sz + 1 + strlen(type->name)) > 1000)
      return 0;
    *(r++) = '_';
    r = SWIG_PackData(r, ptr, sz);
    strcpy(r, type->name);
    return rb_str_new2(result);
  }

  /* Convert a packed pointer value */
  SWIGRUNTIME int
  SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty)
  {
    swig_cast_info *tc;
    const char *c;

    if (TYPE(obj) != T_STRING)
      goto type_error;
    c = StringValuePtr(obj);
    /* Pointer values must start with leading underscore */
    if (*c != '_')
      goto type_error;
    c++;
    c = SWIG_UnpackData(c, ptr, sz);
    if (ty)
    {
      tc = SWIG_TypeCheck(c, ty);
      if (!tc)
        goto type_error;
    }
    return SWIG_OK;

  type_error:
    return SWIG_ERROR;
  }

  SWIGRUNTIME swig_module_info *
  SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
  {
    VALUE pointer;
    swig_module_info *ret = 0;
    VALUE verbose = rb_gv_get("VERBOSE");

    /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
    rb_gv_set("VERBOSE", Qfalse);

    /* first check if pointer already created */
    pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
    if (pointer != Qnil)
    {
      Data_Get_Struct(pointer, swig_module_info, ret);
    }

    /* reinstate warnings */
    rb_gv_set("VERBOSE", verbose);
    return ret;
  }

  SWIGRUNTIME void
  SWIG_Ruby_SetModule(swig_module_info *pointer)
  {
    /* register a new class */
    VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
    /* create and store the structure pointer to a global variable */
    swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
    rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
  }

  /* This function can be used to check whether a proc or method or similarly
     callable function has been passed.  Usually used in a %typecheck, like:

     %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
          $result = SWIG_Ruby_isCallable( $input );
     }
   */
  SWIGINTERN
  int SWIG_Ruby_isCallable(VALUE proc)
  {
    if (rb_respond_to(proc, swig_call_id))
      return 1;
    return 0;
  }

  /* This function can be used to check the arity (number of arguments)
     a proc or method can take.  Usually used in a %typecheck.
     Valid arities will be that equal to minimal or those < 0
     which indicate a variable number of parameters at the end.
   */
  SWIGINTERN
  int SWIG_Ruby_arity(VALUE proc, int minimal)
  {
    if (rb_respond_to(proc, swig_arity_id))
    {
      VALUE num = rb_funcall(proc, swig_arity_id, 0);
      int arity = NUM2INT(num);
      if (arity < 0 && (arity + 1) < -minimal)
        return 1;
      if (arity == minimal)
        return 1;
      return 1;
    }
    return 0;
  }

#ifdef __cplusplus
}
#endif

#define SWIG_exception_fail(code, msg) \
  do                                   \
  {                                    \
    SWIG_Error(code, msg);             \
    SWIG_fail;                         \
  } while (0)

#define SWIG_contract_assert(expr, msg) \
  if (!(expr))                          \
  {                                     \
    SWIG_Error(SWIG_RuntimeError, msg); \
    SWIG_fail;                          \
  }                                     \
  else

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_DistanceFunction swig_types[0]
#define SWIGTYPE_p_FastNoise__Add swig_types[1]
#define SWIGTYPE_p_FastNoise__AddDimension swig_types[2]
#define SWIGTYPE_p_FastNoise__Cellular swig_types[3]
#define SWIGTYPE_p_FastNoise__CellularDistance swig_types[4]
#define SWIGTYPE_p_FastNoise__CellularLookup swig_types[5]
#define SWIGTYPE_p_FastNoise__CellularValue swig_types[6]
#define SWIGTYPE_p_FastNoise__Checkerboard swig_types[7]
#define SWIGTYPE_p_FastNoise__Constant swig_types[8]
#define SWIGTYPE_p_FastNoise__ConvertRGBA8 swig_types[9]
#define SWIGTYPE_p_FastNoise__DistanceToPoint swig_types[10]
#define SWIGTYPE_p_FastNoise__Divide swig_types[11]
#define SWIGTYPE_p_FastNoise__DomainAxisScale swig_types[12]
#define SWIGTYPE_p_FastNoise__DomainOffset swig_types[13]
#define SWIGTYPE_p_FastNoise__DomainRotate swig_types[14]
#define SWIGTYPE_p_FastNoise__DomainScale swig_types[15]
#define SWIGTYPE_p_FastNoise__DomainWarp swig_types[16]
#define SWIGTYPE_p_FastNoise__DomainWarpFractalIndependant swig_types[17]
#define SWIGTYPE_p_FastNoise__DomainWarpFractalProgressive swig_types[18]
#define SWIGTYPE_p_FastNoise__DomainWarpGradient swig_types[19]
#define SWIGTYPE_p_FastNoise__Fade swig_types[20]
#define SWIGTYPE_p_FastNoise__FractalFBm swig_types[21]
#define SWIGTYPE_p_FastNoise__FractalPingPong swig_types[22]
#define SWIGTYPE_p_FastNoise__FractalRidged swig_types[23]
#define SWIGTYPE_p_FastNoise__Generator swig_types[24]
#define SWIGTYPE_p_FastNoise__GeneratorCache swig_types[25]
#define SWIGTYPE_p_FastNoise__GeneratorSourceTT_FastNoise__Generator_t swig_types[26]
#define SWIGTYPE_p_FastNoise__HybridSourceTT_FastNoise__Generator_t swig_types[27]
#define SWIGTYPE_p_FastNoise__Max swig_types[28]
#define SWIGTYPE_p_FastNoise__MaxSmooth swig_types[29]
#define SWIGTYPE_p_FastNoise__Metadata swig_types[30]
#define SWIGTYPE_p_FastNoise__Metadata__Member swig_types[31]
#define SWIGTYPE_p_FastNoise__Min swig_types[32]
#define SWIGTYPE_p_FastNoise__MinSmooth swig_types[33]
#define SWIGTYPE_p_FastNoise__Multiply swig_types[34]
#define SWIGTYPE_p_FastNoise__NodeData swig_types[35]
#define SWIGTYPE_p_FastNoise__OpenSimplex2 swig_types[36]
#define SWIGTYPE_p_FastNoise__OperatorHybridLHS swig_types[37]
#define SWIGTYPE_p_FastNoise__OperatorSourceLHS swig_types[38]
#define SWIGTYPE_p_FastNoise__OutputMinMax swig_types[39]
#define SWIGTYPE_p_FastNoise__Perlin swig_types[40]
#define SWIGTYPE_p_FastNoise__PositionOutput swig_types[41]
#define SWIGTYPE_p_FastNoise__PowFloat swig_types[42]
#define SWIGTYPE_p_FastNoise__PowInt swig_types[43]
#define SWIGTYPE_p_FastNoise__Remap swig_types[44]
#define SWIGTYPE_p_FastNoise__RemoveDimension swig_types[45]
#define SWIGTYPE_p_FastNoise__SeedOffset swig_types[46]
#define SWIGTYPE_p_FastNoise__Simplex swig_types[47]
#define SWIGTYPE_p_FastNoise__SineWave swig_types[48]
#define SWIGTYPE_p_FastNoise__SmartNodeManager swig_types[49]
#define SWIGTYPE_p_FastNoise__Subtract swig_types[50]
#define SWIGTYPE_p_FastNoise__Terrace swig_types[51]
#define SWIGTYPE_p_FastNoise__Value swig_types[52]
#define SWIGTYPE_p_FastNoise__White swig_types[53]
#define SWIGTYPE_p_FastSIMD__eLevel swig_types[54]
#define SWIGTYPE_p_SmartNodeArgT_t swig_types[55]
#define SWIGTYPE_p_SmartNodeT_t swig_types[56]
#define SWIGTYPE_p_char swig_types[57]
#define SWIGTYPE_p_float swig_types[58]
#define SWIGTYPE_p_p_char swig_types[59]
#define SWIGTYPE_p_std__string swig_types[60]
#define SWIGTYPE_p_std__vectorT_FastNoise__Metadata__MemberHybrid_t swig_types[61]
#define SWIGTYPE_p_std__vectorT_FastNoise__Metadata__MemberNodeLookup_t swig_types[62]
#define SWIGTYPE_p_std__vectorT_FastNoise__Metadata__MemberVariable__ValueUnion_t swig_types[63]
#define SWIGTYPE_p_std__vectorT_FastNoise__Metadata__MemberVariable_t swig_types[64]
#define SWIGTYPE_p_std__vectorT_FastNoise__Metadata_const_p_t swig_types[65]
#define SWIGTYPE_p_std__vectorT_FastNoise__NodeData_p_t swig_types[66]
#define SWIGTYPE_p_std__vectorT_char_const_p_t swig_types[67]
#define SWIGTYPE_p_std__vectorT_std__pairT_FastNoise__NodeData_p_float_t_t swig_types[68]
#define SWIGTYPE_p_std__vectorT_std__unique_ptrT_FastNoise__NodeData_t_t swig_types[69]
#define SWIGTYPE_p_uint16_t swig_types[70]
#define SWIGTYPE_p_uint32_t swig_types[71]
#define SWIGTYPE_p_uint64_t swig_types[72]
static swig_type_info *swig_types[74];
static swig_module_info swig_module = {swig_types, 73, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init Init_fastnoise2
#define SWIG_name "Fastnoise2"

static VALUE mFastnoise2;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK

#define SWIGVERSION 0x040002
#define SWIG_VERSION SWIGVERSION

#define SWIG_as_voidptr(a) const_cast<void *>(static_cast<const void *>(a))
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a), reinterpret_cast<void **>(a))

#include <stdexcept>

#include "FastNoise/FastNoise.h"
#include "FastNoise/FastNoise.h"
#include "FastNoise/Metadata.h"
#include "FastNoise/SmartNode.h"
#include "FastNoise/Generators/BasicGenerators.h"
#include "FastNoise/Generators/Blends.h"
#include "FastNoise/Generators/Cellular.h"
#include "FastNoise/Generators/DomainWarp.h"
#include "FastNoise/Generators/DomainWarpFractal.h"
#include "FastNoise/Generators/Fractal.h"
#include "FastNoise/Generators/Generator.h"
#include "FastNoise/Generators/Modifiers.h"
#include "FastNoise/Generators/Perlin.h"
#include "FastNoise/Generators/Simplex.h"
#include "FastNoise/Generators/Value.h"

SWIGINTERN swig_type_info *
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info *info = 0;
  if (!init)
  {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}

SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char **cptr, size_t *psize, int *alloc)
{
  if (TYPE(obj) == T_STRING)
  {
    char *cstr = StringValuePtr(obj);
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)
    {
      if (alloc)
      {
        if (*alloc == SWIG_NEWOBJ)
        {
          *cptr = reinterpret_cast<char *>(memcpy(new char[size], cstr, sizeof(char) * (size)));
        }
        else
        {
          *cptr = cstr;
          *alloc = SWIG_OLDOBJ;
        }
      }
    }
    if (psize)
      *psize = size;
    return SWIG_OK;
  }
  else
  {
    swig_type_info *pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor)
    {
      void *vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK)
      {
        if (cptr)
          *cptr = (char *)vptr;
        if (psize)
          *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
        if (alloc)
          *alloc = SWIG_OLDOBJ;
        return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}

#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
#if !defined(LLONG_MAX) && defined(__GNUC__) && defined(__LONG_LONG_MAX__)
#define LLONG_MAX __LONG_LONG_MAX__
#define LLONG_MIN (-LLONG_MAX - 1LL)
#define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
#endif
#endif

SWIGINTERN VALUE
SWIG_ruby_failed(VALUE SWIGUNUSEDPARM(arg1), VALUE SWIGUNUSEDPARM(arg2))
{
  return Qnil;
}

/*@SWIG:C:/msys64/ucrt64/share/swig/4.0.2\ruby\rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long(VALUE obj, long *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM))
  {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2LONG), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil)
    {
      if (val)
        *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}

SWIGINTERN int
SWIG_AsVal_int(VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long(obj, &v);
  if (SWIG_IsOK(res))
  {
    if ((v < INT_MIN || v > INT_MAX))
    {
      return SWIG_OverflowError;
    }
    else
    {
      if (val)
        *val = static_cast<int>(v);
    }
  }
  return res;
}

SWIGINTERN int
SWIG_AsVal_bool(VALUE obj, bool *val)
{
  if (obj == Qtrue)
  {
    if (val)
      *val = true;
    return SWIG_OK;
  }
  else if (obj == Qfalse)
  {
    if (val)
      *val = false;
    return SWIG_OK;
  }
  else
  {
    int res = 0;
    if (SWIG_AsVal_int(obj, &res) == SWIG_OK)
    {
      if (val)
        *val = res ? true : false;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}

SWIGINTERNINLINE VALUE
SWIG_FromCharPtrAndSize(const char *carray, size_t size)
{
  if (carray)
  {
    if (size > LONG_MAX)
    {
      swig_type_info *pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? SWIG_NewPointerObj(const_cast<char *>(carray), pchar_descriptor, 0) : Qnil;
    }
    else
    {
      return rb_str_new(carray, static_cast<long>(size));
    }
  }
  else
  {
    return Qnil;
  }
}

SWIGINTERNINLINE VALUE
SWIG_FromCharPtr(const char *cptr)
{
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERNINLINE VALUE
SWIG_From_bool(bool value)
{
  return value ? Qtrue : Qfalse;
}

#include <float.h>

#include <math.h>

/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
#if defined(isfinite)
#define SWIG_isfinite(X) (isfinite(X))
#elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std
{
}
extern "C++" template <typename T>
inline int SWIG_isfinite_func(T x)
{
  using namespace std;
  return isfinite(x);
}
#define SWIG_isfinite(X) (SWIG_isfinite_func(X))
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#define SWIG_isfinite(X) (__builtin_isfinite(X))
#elif defined(__clang__) && defined(__has_builtin)
#if __has_builtin(__builtin_isfinite)
#define SWIG_isfinite(X) (__builtin_isfinite(X))
#endif
#elif defined(_MSC_VER)
#define SWIG_isfinite(X) (_finite(X))
#elif defined(__sun) && defined(__SVR4)
#include <ieeefp.h>
#define SWIG_isfinite(X) (finite(X))
#endif
#endif

/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
#define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
#define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif

/*@SWIG:C:/msys64/ucrt64/share/swig/4.0.2\ruby\rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj);
  (void)type;
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double(VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM))
  {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2DBL), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil)
    {
      if (val)
        *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}

SWIGINTERN int
SWIG_AsVal_float(VALUE obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double(obj, &v);
  if (SWIG_IsOK(res))
  {
    if (SWIG_Float_Overflow_Check(v))
    {
      return SWIG_OverflowError;
    }
    else
    {
      if (val)
        *val = static_cast<float>(v);
    }
  }
  return res;
}

#define SWIG_From_long LONG2NUM

SWIGINTERNINLINE VALUE
SWIG_From_int(int value)
{
  return SWIG_From_long(value);
}

#define SWIG_From_double rb_float_new

SWIGINTERNINLINE VALUE
SWIG_From_float(float value)
{
  return SWIG_From_double(value);
}

SWIGINTERN VALUE
_wrap_NewFromEncodedNodeTree__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  char *arg1 = (char *)0;
  FastSIMD::eLevel arg2;
  int res1;
  char *buf1 = 0;
  int alloc1 = 0;
  void *argp2;
  int res2 = 0;
  FastNoise::SmartNode<> result;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)", argc);
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "char const *", "FastNoise::NewFromEncodedNodeTree", 1, argv[0]));
  }
  arg1 = reinterpret_cast<char *>(buf1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_FastSIMD__eLevel, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastSIMD::eLevel", "FastNoise::NewFromEncodedNodeTree", 2, argv[1]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastSIMD::eLevel", "FastNoise::NewFromEncodedNodeTree", 2, argv[1]));
    }
    else
    {
      arg2 = *(reinterpret_cast<FastSIMD::eLevel *>(argp2));
    }
  }
  result = FastNoise::NewFromEncodedNodeTree((char const *)arg1, arg2);
  vresult = SWIG_NewPointerObj((new FastNoise::SmartNode<>(static_cast<const FastNoise::SmartNode<> &>(result))), SWIGTYPE_p_SmartNodeT_t, SWIG_POINTER_OWN | 0);
  if (alloc1 == SWIG_NEWOBJ)
    delete[] buf1;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ)
    delete[] buf1;
  return Qnil;
}

SWIGINTERN VALUE
_wrap_NewFromEncodedNodeTree__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  char *arg1 = (char *)0;
  int res1;
  char *buf1 = 0;
  int alloc1 = 0;
  FastNoise::SmartNode<> result;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "char const *", "FastNoise::NewFromEncodedNodeTree", 1, argv[0]));
  }
  arg1 = reinterpret_cast<char *>(buf1);
  result = FastNoise::NewFromEncodedNodeTree((char const *)arg1);
  vresult = SWIG_NewPointerObj((new FastNoise::SmartNode<>(static_cast<const FastNoise::SmartNode<> &>(result))), SWIGTYPE_p_SmartNodeT_t, SWIG_POINTER_OWN | 0);
  if (alloc1 == SWIG_NEWOBJ)
    delete[] buf1;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ)
    delete[] buf1;
  return Qnil;
}

SWIGINTERN VALUE _wrap_NewFromEncodedNodeTree(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[2];
  int ii;

  argc = nargs;
  if (argc > 2)
    SWIG_fail;
  for (ii = 0; (ii < argc); ++ii)
  {
    argv[ii] = args[ii];
  }
  if (argc == 1)
  {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      return _wrap_NewFromEncodedNodeTree__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2)
  {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FastSIMD__eLevel, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_NewFromEncodedNodeTree__SWIG_0(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 2, "NewFromEncodedNodeTree",
                              "    FastNoise::SmartNode< > NewFromEncodedNodeTree(char const *encodedNodeTreeString, FastSIMD::eLevel maxSimdLevel)\n"
                              "    FastNoise::SmartNode< > NewFromEncodedNodeTree(char const *encodedNodeTreeString)\n");

  return Qnil;
}

static swig_class SwigClassMetadata;

SWIGINTERN void
free_FastNoise_Metadata(void *self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)self;
  delete arg1;
}

SWIGINTERN VALUE
_wrap_Metadata_GetAll(int argc, VALUE *argv, VALUE self)
{
  std::vector<FastNoise::Metadata const *> *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  result = (std::vector<FastNoise::Metadata const *> *)&FastNoise::Metadata::GetAll();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_FastNoise__Metadata_const_p_t, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_GetFromId(int argc, VALUE *argv, VALUE self)
{
  uint16_t arg1;
  void *argp1;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_uint16_t, 0);
    if (!SWIG_IsOK(res1))
    {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "uint16_t", "FastNoise::Metadata::GetFromId", 1, argv[0]));
    }
    if (!argp1)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint16_t", "FastNoise::Metadata::GetFromId", 1, argv[0]));
    }
    else
    {
      arg1 = *(reinterpret_cast<uint16_t *>(argp1));
    }
  }
  result = (FastNoise::Metadata *)FastNoise::Metadata::GetFromId(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_SerialiseNodeData__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::NodeData *arg1 = (FastNoise::NodeData *)0;
  bool arg2;
  void *argp1 = 0;
  int res1 = 0;
  bool val2;
  int ecode2 = 0;
  std::string result;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_FastNoise__NodeData, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::NodeData *", "FastNoise::Metadata::SerialiseNodeData", 1, argv[0]));
  }
  arg1 = reinterpret_cast<FastNoise::NodeData *>(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "bool", "FastNoise::Metadata::SerialiseNodeData", 2, argv[1]));
  }
  arg2 = static_cast<bool>(val2);
  result = FastNoise::Metadata::SerialiseNodeData(arg1, arg2);
  vresult = SWIG_NewPointerObj((new std::string(static_cast<const std::string &>(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_SerialiseNodeData__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::NodeData *arg1 = (FastNoise::NodeData *)0;
  void *argp1 = 0;
  int res1 = 0;
  std::string result;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_FastNoise__NodeData, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::NodeData *", "FastNoise::Metadata::SerialiseNodeData", 1, argv[0]));
  }
  arg1 = reinterpret_cast<FastNoise::NodeData *>(argp1);
  result = FastNoise::Metadata::SerialiseNodeData(arg1);
  vresult = SWIG_NewPointerObj((new std::string(static_cast<const std::string &>(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_Metadata_SerialiseNodeData(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[2];
  int ii;

  argc = nargs;
  if (argc > 2)
    SWIG_fail;
  for (ii = 0; (ii < argc); ++ii)
  {
    argv[ii] = args[ii];
  }
  if (argc == 1)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__NodeData, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      return _wrap_Metadata_SerialiseNodeData__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__NodeData, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_Metadata_SerialiseNodeData__SWIG_0(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 2, "Metadata.SerialiseNodeData",
                              "    std::string Metadata.SerialiseNodeData(FastNoise::NodeData *nodeData, bool fixUp)\n"
                              "    std::string Metadata.SerialiseNodeData(FastNoise::NodeData *nodeData)\n");

  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_DeserialiseNodeData(int argc, VALUE *argv, VALUE self)
{
  char *arg1 = (char *)0;
  std::vector<std::unique_ptr<FastNoise::NodeData>> *arg2 = 0;
  int res1;
  char *buf1 = 0;
  int alloc1 = 0;
  void *argp2 = 0;
  int res2 = 0;
  FastNoise::NodeData *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)", argc);
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "char const *", "FastNoise::Metadata::DeserialiseNodeData", 1, argv[0]));
  }
  arg1 = reinterpret_cast<char *>(buf1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_std__unique_ptrT_FastNoise__NodeData_t_t, 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "std::vector< std::unique_ptr< FastNoise::NodeData > > &", "FastNoise::Metadata::DeserialiseNodeData", 2, argv[1]));
  }
  if (!argp2)
  {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::unique_ptr< FastNoise::NodeData > > &", "FastNoise::Metadata::DeserialiseNodeData", 2, argv[1]));
  }
  arg2 = reinterpret_cast<std::vector<std::unique_ptr<FastNoise::NodeData>> *>(argp2);
  result = (FastNoise::NodeData *)FastNoise::Metadata::DeserialiseNodeData((char const *)arg1, *arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__NodeData, 0 | 0);
  if (alloc1 == SWIG_NEWOBJ)
    delete[] buf1;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ)
    delete[] buf1;
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_FormatMetadataNodeName__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  bool arg2;
  void *argp1 = 0;
  int res1 = 0;
  bool val2;
  int ecode2 = 0;
  std::string result;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata const *", "FastNoise::Metadata::FormatMetadataNodeName", 1, argv[0]));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "bool", "FastNoise::Metadata::FormatMetadataNodeName", 2, argv[1]));
  }
  arg2 = static_cast<bool>(val2);
  result = FastNoise::Metadata::FormatMetadataNodeName((FastNoise::Metadata const *)arg1, arg2);
  vresult = SWIG_NewPointerObj((new std::string(static_cast<const std::string &>(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_FormatMetadataNodeName__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  void *argp1 = 0;
  int res1 = 0;
  std::string result;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata const *", "FastNoise::Metadata::FormatMetadataNodeName", 1, argv[0]));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  result = FastNoise::Metadata::FormatMetadataNodeName((FastNoise::Metadata const *)arg1);
  vresult = SWIG_NewPointerObj((new std::string(static_cast<const std::string &>(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_Metadata_FormatMetadataNodeName(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[2];
  int ii;

  argc = nargs;
  if (argc > 2)
    SWIG_fail;
  for (ii = 0; (ii < argc); ++ii)
  {
    argv[ii] = args[ii];
  }
  if (argc == 1)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__Metadata, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      return _wrap_Metadata_FormatMetadataNodeName__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__Metadata, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_Metadata_FormatMetadataNodeName__SWIG_0(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 2, "Metadata.FormatMetadataNodeName",
                              "    std::string Metadata.FormatMetadataNodeName(FastNoise::Metadata const *metadata, bool removeGroups)\n"
                              "    std::string Metadata.FormatMetadataNodeName(FastNoise::Metadata const *metadata)\n");

  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_FormatMetadataMemberName(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata::Member *arg1 = 0;
  void *argp1;
  int res1 = 0;
  std::string result;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_FastNoise__Metadata__Member, 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata::Member const &", "FastNoise::Metadata::FormatMetadataMemberName", 1, argv[0]));
  }
  if (!argp1)
  {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::Metadata::Member const &", "FastNoise::Metadata::FormatMetadataMemberName", 1, argv[0]));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata::Member *>(argp1);
  result = FastNoise::Metadata::FormatMetadataMemberName((FastNoise::Metadata::Member const &)*arg1);
  vresult = SWIG_NewPointerObj((new std::string(static_cast<const std::string &>(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_id_set(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  uint16_t arg2;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata *", "id", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint16_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "uint16_t", "id", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint16_t", "id", 2, argv[0]));
    }
    else
    {
      arg2 = *(reinterpret_cast<uint16_t *>(argp2));
    }
  }
  if (arg1)
    (arg1)->id = arg2;
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_id_get(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  void *argp1 = 0;
  int res1 = 0;
  uint16_t result;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata *", "id", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  result = ((arg1)->id);
  vresult = SWIG_NewPointerObj((new uint16_t(static_cast<const uint16_t &>(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_name_set(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  char *arg2 = (char *)0;
  void *argp1 = 0;
  int res1 = 0;
  int res2;
  char *buf2 = 0;
  int alloc2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata *", "name", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "char const *", "name", 2, argv[0]));
  }
  arg2 = reinterpret_cast<char *>(buf2);
  if (arg2)
  {
    size_t size = strlen(reinterpret_cast<const char *>(reinterpret_cast<const char *>(arg2))) + 1;
    arg1->name = (char const *)reinterpret_cast<char *>(memcpy(new char[size], arg2, sizeof(char) * (size)));
  }
  else
  {
    arg1->name = 0;
  }
  if (alloc2 == SWIG_NEWOBJ)
    delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ)
    delete[] buf2;
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_name_get(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  void *argp1 = 0;
  int res1 = 0;
  char *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata *", "name", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  result = (char *)((arg1)->name);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_groups_set(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  std::vector<char const *> arg2;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata *", "groups", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_char_const_p_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "std::vector< char const * >", "groups", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< char const * >", "groups", 2, argv[0]));
    }
    else
    {
      arg2 = *(reinterpret_cast<std::vector<char const *> *>(argp2));
    }
  }
  if (arg1)
    (arg1)->groups = arg2;
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_groups_get(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  void *argp1 = 0;
  int res1 = 0;
  std::vector<char const *> result;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata *", "groups", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  result = ((arg1)->groups);
  vresult = SWIG_NewPointerObj((new std::vector<char const *>(static_cast<const std::vector<char const *> &>(result))), SWIGTYPE_p_std__vectorT_char_const_p_t, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_memberVariables_set(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  std::vector<FastNoise::Metadata::MemberVariable> *arg2 = (std::vector<FastNoise::Metadata::MemberVariable> *)0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2 = 0;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata *", "memberVariables", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_FastNoise__Metadata__MemberVariable_t, 0 | 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "std::vector< FastNoise::Metadata::MemberVariable > *", "memberVariables", 2, argv[0]));
  }
  arg2 = reinterpret_cast<std::vector<FastNoise::Metadata::MemberVariable> *>(argp2);
  if (arg1)
    (arg1)->memberVariables = *arg2;
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_memberVariables_get(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  void *argp1 = 0;
  int res1 = 0;
  std::vector<FastNoise::Metadata::MemberVariable> *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata *", "memberVariables", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  result = (std::vector<FastNoise::Metadata::MemberVariable> *)&((arg1)->memberVariables);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_FastNoise__Metadata__MemberVariable_t, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_memberNodeLookups_set(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  std::vector<FastNoise::Metadata::MemberNodeLookup> *arg2 = (std::vector<FastNoise::Metadata::MemberNodeLookup> *)0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2 = 0;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata *", "memberNodeLookups", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_FastNoise__Metadata__MemberNodeLookup_t, 0 | 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "std::vector< FastNoise::Metadata::MemberNodeLookup > *", "memberNodeLookups", 2, argv[0]));
  }
  arg2 = reinterpret_cast<std::vector<FastNoise::Metadata::MemberNodeLookup> *>(argp2);
  if (arg1)
    (arg1)->memberNodeLookups = *arg2;
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_memberNodeLookups_get(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  void *argp1 = 0;
  int res1 = 0;
  std::vector<FastNoise::Metadata::MemberNodeLookup> *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata *", "memberNodeLookups", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  result = (std::vector<FastNoise::Metadata::MemberNodeLookup> *)&((arg1)->memberNodeLookups);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_FastNoise__Metadata__MemberNodeLookup_t, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_memberHybrids_set(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  std::vector<FastNoise::Metadata::MemberHybrid> *arg2 = (std::vector<FastNoise::Metadata::MemberHybrid> *)0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2 = 0;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata *", "memberHybrids", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_FastNoise__Metadata__MemberHybrid_t, 0 | 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "std::vector< FastNoise::Metadata::MemberHybrid > *", "memberHybrids", 2, argv[0]));
  }
  arg2 = reinterpret_cast<std::vector<FastNoise::Metadata::MemberHybrid> *>(argp2);
  if (arg1)
    (arg1)->memberHybrids = *arg2;
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_memberHybrids_get(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  void *argp1 = 0;
  int res1 = 0;
  std::vector<FastNoise::Metadata::MemberHybrid> *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata *", "memberHybrids", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  result = (std::vector<FastNoise::Metadata::MemberHybrid> *)&((arg1)->memberHybrids);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_FastNoise__Metadata__MemberHybrid_t, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_CreateNode__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  FastSIMD::eLevel arg2;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;
  FastNoise::SmartNode<> result;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata const *", "CreateNode", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_FastSIMD__eLevel, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastSIMD::eLevel", "CreateNode", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastSIMD::eLevel", "CreateNode", 2, argv[0]));
    }
    else
    {
      arg2 = *(reinterpret_cast<FastSIMD::eLevel *>(argp2));
    }
  }
  result = ((FastNoise::Metadata const *)arg1)->CreateNode(arg2);
  vresult = SWIG_NewPointerObj((new FastNoise::SmartNode<>(static_cast<const FastNoise::SmartNode<> &>(result))), SWIGTYPE_p_SmartNodeT_t, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Metadata_CreateNode__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::SmartNode<> result;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata const *", "CreateNode", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  result = ((FastNoise::Metadata const *)arg1)->CreateNode();
  vresult = SWIG_NewPointerObj((new FastNoise::SmartNode<>(static_cast<const FastNoise::SmartNode<> &>(result))), SWIGTYPE_p_SmartNodeT_t, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_Metadata_CreateNode(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3)
    SWIG_fail;
  for (ii = 1; (ii < argc); ++ii)
  {
    argv[ii] = args[ii - 1];
  }
  if (argc == 1)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__Metadata, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      return _wrap_Metadata_CreateNode__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__Metadata, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FastSIMD__eLevel, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_Metadata_CreateNode__SWIG_0(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 3, "Metadata.CreateNode",
                              "    FastNoise::SmartNode< > Metadata.CreateNode(FastSIMD::eLevel maxSimdLevel)\n"
                              "    FastNoise::SmartNode< > Metadata.CreateNode()\n");

  return Qnil;
}

static swig_class SwigClassNodeData;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_NodeData_allocate(VALUE self)
#else
_wrap_NodeData_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_FastNoise__NodeData);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}

SWIGINTERN VALUE
_wrap_new_NodeData(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Metadata *arg1 = (FastNoise::Metadata *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::NodeData *result = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Metadata const *", "NodeData", 1, argv[0]));
  }
  arg1 = reinterpret_cast<FastNoise::Metadata *>(argp1);
  result = (FastNoise::NodeData *)new FastNoise::NodeData((FastNoise::Metadata const *)arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_NodeData_metadata_set(int argc, VALUE *argv, VALUE self)
{
  FastNoise::NodeData *arg1 = (FastNoise::NodeData *)0;
  FastNoise::Metadata *arg2 = (FastNoise::Metadata *)0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2 = 0;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__NodeData, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::NodeData *", "metadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::NodeData *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_FastNoise__Metadata, SWIG_POINTER_DISOWN | 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::Metadata const *", "metadata", 2, argv[0]));
  }
  arg2 = reinterpret_cast<FastNoise::Metadata *>(argp2);
  if (arg1)
    (arg1)->metadata = (FastNoise::Metadata const *)arg2;
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_NodeData_metadata_get(int argc, VALUE *argv, VALUE self)
{
  FastNoise::NodeData *arg1 = (FastNoise::NodeData *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__NodeData, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::NodeData *", "metadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::NodeData *>(argp1);
  result = (FastNoise::Metadata *)((arg1)->metadata);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_NodeData_variables_set(int argc, VALUE *argv, VALUE self)
{
  FastNoise::NodeData *arg1 = (FastNoise::NodeData *)0;
  std::vector<FastNoise::Metadata::MemberVariable::ValueUnion> *arg2 = (std::vector<FastNoise::Metadata::MemberVariable::ValueUnion> *)0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2 = 0;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__NodeData, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::NodeData *", "variables", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::NodeData *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_FastNoise__Metadata__MemberVariable__ValueUnion_t, 0 | 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "std::vector< FastNoise::Metadata::MemberVariable::ValueUnion > *", "variables", 2, argv[0]));
  }
  arg2 = reinterpret_cast<std::vector<FastNoise::Metadata::MemberVariable::ValueUnion> *>(argp2);
  if (arg1)
    (arg1)->variables = *arg2;
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_NodeData_variables_get(int argc, VALUE *argv, VALUE self)
{
  FastNoise::NodeData *arg1 = (FastNoise::NodeData *)0;
  void *argp1 = 0;
  int res1 = 0;
  std::vector<FastNoise::Metadata::MemberVariable::ValueUnion> *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__NodeData, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::NodeData *", "variables", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::NodeData *>(argp1);
  result = (std::vector<FastNoise::Metadata::MemberVariable::ValueUnion> *)&((arg1)->variables);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_FastNoise__Metadata__MemberVariable__ValueUnion_t, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_NodeData_nodeLookups_set(int argc, VALUE *argv, VALUE self)
{
  FastNoise::NodeData *arg1 = (FastNoise::NodeData *)0;
  std::vector<FastNoise::NodeData *> *arg2 = (std::vector<FastNoise::NodeData *> *)0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2 = 0;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__NodeData, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::NodeData *", "nodeLookups", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::NodeData *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_FastNoise__NodeData_p_t, 0 | 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "std::vector< FastNoise::NodeData * > *", "nodeLookups", 2, argv[0]));
  }
  arg2 = reinterpret_cast<std::vector<FastNoise::NodeData *> *>(argp2);
  if (arg1)
    (arg1)->nodeLookups = *arg2;
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_NodeData_nodeLookups_get(int argc, VALUE *argv, VALUE self)
{
  FastNoise::NodeData *arg1 = (FastNoise::NodeData *)0;
  void *argp1 = 0;
  int res1 = 0;
  std::vector<FastNoise::NodeData *> *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__NodeData, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::NodeData *", "nodeLookups", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::NodeData *>(argp1);
  result = (std::vector<FastNoise::NodeData *> *)&((arg1)->nodeLookups);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_FastNoise__NodeData_p_t, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_NodeData_hybrids_set(int argc, VALUE *argv, VALUE self)
{
  FastNoise::NodeData *arg1 = (FastNoise::NodeData *)0;
  std::vector<std::pair<FastNoise::NodeData *, float>> arg2;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__NodeData, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::NodeData *", "hybrids", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::NodeData *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_std__pairT_FastNoise__NodeData_p_float_t_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "std::vector< std::pair< FastNoise::NodeData *,float > >", "hybrids", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::pair< FastNoise::NodeData *,float > >", "hybrids", 2, argv[0]));
    }
    else
    {
      arg2 = *(reinterpret_cast<std::vector<std::pair<FastNoise::NodeData *, float>> *>(argp2));
    }
  }
  if (arg1)
    (arg1)->hybrids = arg2;
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_NodeData_hybrids_get(int argc, VALUE *argv, VALUE self)
{
  FastNoise::NodeData *arg1 = (FastNoise::NodeData *)0;
  void *argp1 = 0;
  int res1 = 0;
  std::vector<std::pair<FastNoise::NodeData *, float>> result;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__NodeData, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::NodeData *", "hybrids", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::NodeData *>(argp1);
  result = ((arg1)->hybrids);
  vresult = SWIG_NewPointerObj((new std::vector<std::pair<FastNoise::NodeData *, float>>(static_cast<const std::vector<std::pair<FastNoise::NodeData *, float>> &>(result))), SWIGTYPE_p_std__vectorT_std__pairT_FastNoise__NodeData_p_float_t_t, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

/*
  Document-method: Fastnoise2::NodeData.==

  call-seq:
    ==(rhs) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_NodeData___eq__(int argc, VALUE *argv, VALUE self)
{
  FastNoise::NodeData *arg1 = (FastNoise::NodeData *)0;
  FastNoise::NodeData *arg2 = 0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;
  bool result;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__NodeData, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::NodeData const *", "operator ==", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::NodeData *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_FastNoise__NodeData, 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::NodeData const &", "operator ==", 2, argv[0]));
  }
  if (!argp2)
  {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::NodeData const &", "operator ==", 2, argv[0]));
  }
  arg2 = reinterpret_cast<FastNoise::NodeData *>(argp2);
  result = (bool)((FastNoise::NodeData const *)arg1)->operator==((FastNoise::NodeData const &)*arg2);
  vresult = SWIG_From_bool(static_cast<bool>(result));
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_NodeData(void *self)
{
  FastNoise::NodeData *arg1 = (FastNoise::NodeData *)self;
  delete arg1;
}

static swig_class SwigClassSmartNodeManager;

SWIGINTERN VALUE
_wrap_SmartNodeManager_SetMemoryPoolSize(int argc, VALUE *argv, VALUE self)
{
  uint32_t arg1;
  void *argp1;
  int res1 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_uint32_t, 0);
    if (!SWIG_IsOK(res1))
    {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "uint32_t", "FastNoise::SmartNodeManager::SetMemoryPoolSize", 1, argv[0]));
    }
    if (!argp1)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint32_t", "FastNoise::SmartNodeManager::SetMemoryPoolSize", 1, argv[0]));
    }
    else
    {
      arg1 = *(reinterpret_cast<uint32_t *>(argp1));
    }
  }
  FastNoise::SmartNodeManager::SetMemoryPoolSize(arg1);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_SmartNodeManager(void *self)
{
  FastNoise::SmartNodeManager *arg1 = (FastNoise::SmartNodeManager *)self;
  delete arg1;
}

static swig_class SwigClassConstant;

SWIGINTERN VALUE
_wrap_Constant_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Constant *arg1 = (FastNoise::Constant *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Constant, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Constant const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Constant *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Constant const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Constant_SetValue(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Constant *arg1 = (FastNoise::Constant *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Constant, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Constant *", "SetValue", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Constant *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetValue", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetValue(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_Constant(void *self)
{
  FastNoise::Constant *arg1 = (FastNoise::Constant *)self;
  delete arg1;
}

static swig_class SwigClassWhite;

SWIGINTERN VALUE
_wrap_White_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::White *arg1 = (FastNoise::White *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__White, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::White const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::White *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::White const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_White(void *self)
{
  FastNoise::White *arg1 = (FastNoise::White *)self;
  delete arg1;
}

static swig_class SwigClassCheckerboard;

SWIGINTERN VALUE
_wrap_Checkerboard_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Checkerboard *arg1 = (FastNoise::Checkerboard *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Checkerboard, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Checkerboard const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Checkerboard *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Checkerboard const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Checkerboard_SetSize(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Checkerboard *arg1 = (FastNoise::Checkerboard *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Checkerboard, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Checkerboard *", "SetSize", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Checkerboard *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetSize", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetSize(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_Checkerboard(void *self)
{
  FastNoise::Checkerboard *arg1 = (FastNoise::Checkerboard *)self;
  delete arg1;
}

static swig_class SwigClassSineWave;

SWIGINTERN VALUE
_wrap_SineWave_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::SineWave *arg1 = (FastNoise::SineWave *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__SineWave, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::SineWave const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::SineWave *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::SineWave const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_SineWave_SetScale(int argc, VALUE *argv, VALUE self)
{
  FastNoise::SineWave *arg1 = (FastNoise::SineWave *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__SineWave, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::SineWave *", "SetScale", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::SineWave *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetScale", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetScale(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_SineWave(void *self)
{
  FastNoise::SineWave *arg1 = (FastNoise::SineWave *)self;
  delete arg1;
}

static swig_class SwigClassPositionOutput;

SWIGINTERN VALUE
_wrap_PositionOutput_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::PositionOutput *arg1 = (FastNoise::PositionOutput *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__PositionOutput, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::PositionOutput const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::PositionOutput *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::PositionOutput const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_PositionOutput(void *self)
{
  FastNoise::PositionOutput *arg1 = (FastNoise::PositionOutput *)self;
  delete arg1;
}

static swig_class SwigClassDistanceToPoint;

SWIGINTERN VALUE
_wrap_DistanceToPoint_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DistanceToPoint *arg1 = (FastNoise::DistanceToPoint *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DistanceToPoint, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DistanceToPoint const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DistanceToPoint *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::DistanceToPoint const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_DistanceToPoint_SetSource(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DistanceToPoint *arg1 = (FastNoise::DistanceToPoint *)0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DistanceToPoint, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DistanceToPoint *", "SetSource", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DistanceToPoint *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));

      (arg1)->SetSource(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_DistanceToPoint_SetDistanceFunction(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DistanceToPoint *arg1 = (FastNoise::DistanceToPoint *)0;
  FastNoise::DistanceFunction arg2;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DistanceToPoint, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DistanceToPoint *", "SetDistanceFunction", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DistanceToPoint *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_DistanceFunction, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "DistanceFunction", "SetDistanceFunction", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "DistanceFunction", "SetDistanceFunction", 2, argv[0]));
    }
    else
    {
      arg2 = *(reinterpret_cast<FastNoise::DistanceFunction *>(argp2));
    }
  }
  (arg1)->SetDistanceFunction(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_DistanceToPoint(void *self)
{
  FastNoise::DistanceToPoint *arg1 = (FastNoise::DistanceToPoint *)self;
  delete arg1;
}

static swig_class SwigClassOperatorSourceLHS;

SWIGINTERN VALUE
_wrap_OperatorSourceLHS_SetLHS(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OperatorSourceLHS *arg1 = (FastNoise::OperatorSourceLHS *)0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__OperatorSourceLHS, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::OperatorSourceLHS *", "SetLHS", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::OperatorSourceLHS *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetLHS", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetLHS", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetLHS(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_OperatorSourceLHS_SetRHS__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OperatorSourceLHS *arg1 = (FastNoise::OperatorSourceLHS *)0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__OperatorSourceLHS, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::OperatorSourceLHS *", "SetRHS", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::OperatorSourceLHS *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetRHS", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetRHS", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetRHS(arg2);
    }
  }
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_OperatorSourceLHS_SetRHS__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OperatorSourceLHS *arg1 = (FastNoise::OperatorSourceLHS *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__OperatorSourceLHS, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::OperatorSourceLHS *", "SetRHS", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::OperatorSourceLHS *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetRHS", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetRHS(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_OperatorSourceLHS_SetRHS(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3)
    SWIG_fail;
  for (ii = 1; (ii < argc); ++ii)
  {
    argv[ii] = args[ii - 1];
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__OperatorSourceLHS, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_SmartNodeArgT_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_OperatorSourceLHS_SetRHS__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__OperatorSourceLHS, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_OperatorSourceLHS_SetRHS__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 3, "OperatorSourceLHS.SetRHS",
                              "    void OperatorSourceLHS.SetRHS(FastNoise::SmartNodeArg< > gen)\n"
                              "    void OperatorSourceLHS.SetRHS(float value)\n");

  return Qnil;
}

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OperatorSourceLHS_allocate(VALUE self)
#else
_wrap_OperatorSourceLHS_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_FastNoise__OperatorSourceLHS);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}

SWIGINTERN void
free_FastNoise_OperatorSourceLHS(void *self)
{
  FastNoise::OperatorSourceLHS *arg1 = (FastNoise::OperatorSourceLHS *)self;
  delete arg1;
}

static swig_class SwigClassOperatorHybridLHS;

SWIGINTERN VALUE
_wrap_OperatorHybridLHS_SetLHS__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OperatorHybridLHS *arg1 = (FastNoise::OperatorHybridLHS *)0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__OperatorHybridLHS, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::OperatorHybridLHS *", "SetLHS", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::OperatorHybridLHS *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetLHS", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetLHS", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetLHS(arg2);
    }
  }
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_OperatorHybridLHS_SetLHS__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OperatorHybridLHS *arg1 = (FastNoise::OperatorHybridLHS *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__OperatorHybridLHS, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::OperatorHybridLHS *", "SetLHS", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::OperatorHybridLHS *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetLHS", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetLHS(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_OperatorHybridLHS_SetLHS(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3)
    SWIG_fail;
  for (ii = 1; (ii < argc); ++ii)
  {
    argv[ii] = args[ii - 1];
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__OperatorHybridLHS, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_SmartNodeArgT_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_OperatorHybridLHS_SetLHS__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__OperatorHybridLHS, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_OperatorHybridLHS_SetLHS__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 3, "OperatorHybridLHS.SetLHS",
                              "    void OperatorHybridLHS.SetLHS(FastNoise::SmartNodeArg< > gen)\n"
                              "    void OperatorHybridLHS.SetLHS(float value)\n");

  return Qnil;
}

SWIGINTERN VALUE
_wrap_OperatorHybridLHS_SetRHS__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OperatorHybridLHS *arg1 = (FastNoise::OperatorHybridLHS *)0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__OperatorHybridLHS, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::OperatorHybridLHS *", "SetRHS", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::OperatorHybridLHS *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetRHS", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetRHS", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetRHS(arg2);
    }
  }
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_OperatorHybridLHS_SetRHS__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OperatorHybridLHS *arg1 = (FastNoise::OperatorHybridLHS *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__OperatorHybridLHS, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::OperatorHybridLHS *", "SetRHS", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::OperatorHybridLHS *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetRHS", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetRHS(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_OperatorHybridLHS_SetRHS(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3)
    SWIG_fail;
  for (ii = 1; (ii < argc); ++ii)
  {
    argv[ii] = args[ii - 1];
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__OperatorHybridLHS, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_SmartNodeArgT_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_OperatorHybridLHS_SetRHS__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__OperatorHybridLHS, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_OperatorHybridLHS_SetRHS__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 3, "OperatorHybridLHS.SetRHS",
                              "    void OperatorHybridLHS.SetRHS(FastNoise::SmartNodeArg< > gen)\n"
                              "    void OperatorHybridLHS.SetRHS(float value)\n");

  return Qnil;
}

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OperatorHybridLHS_allocate(VALUE self)
#else
_wrap_OperatorHybridLHS_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_FastNoise__OperatorHybridLHS);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}

SWIGINTERN void
free_FastNoise_OperatorHybridLHS(void *self)
{
  FastNoise::OperatorHybridLHS *arg1 = (FastNoise::OperatorHybridLHS *)self;
  delete arg1;
}

static swig_class SwigClassAdd;

SWIGINTERN VALUE
_wrap_Add_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Add *arg1 = (FastNoise::Add *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Add, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Add const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Add *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Add const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_Add(void *self)
{
  FastNoise::Add *arg1 = (FastNoise::Add *)self;
  delete arg1;
}

static swig_class SwigClassSubtract;

SWIGINTERN VALUE
_wrap_Subtract_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Subtract *arg1 = (FastNoise::Subtract *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Subtract, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Subtract const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Subtract *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Subtract const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_Subtract(void *self)
{
  FastNoise::Subtract *arg1 = (FastNoise::Subtract *)self;
  delete arg1;
}

static swig_class SwigClassMultiply;

SWIGINTERN VALUE
_wrap_Multiply_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Multiply *arg1 = (FastNoise::Multiply *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Multiply, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Multiply const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Multiply *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Multiply const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_Multiply(void *self)
{
  FastNoise::Multiply *arg1 = (FastNoise::Multiply *)self;
  delete arg1;
}

static swig_class SwigClassDivide;

SWIGINTERN VALUE
_wrap_Divide_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Divide *arg1 = (FastNoise::Divide *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Divide, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Divide const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Divide *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Divide const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_Divide(void *self)
{
  FastNoise::Divide *arg1 = (FastNoise::Divide *)self;
  delete arg1;
}

static swig_class SwigClassMin;

SWIGINTERN VALUE
_wrap_Min_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Min *arg1 = (FastNoise::Min *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Min, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Min const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Min *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Min const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_Min(void *self)
{
  FastNoise::Min *arg1 = (FastNoise::Min *)self;
  delete arg1;
}

static swig_class SwigClassMax;

SWIGINTERN VALUE
_wrap_Max_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Max *arg1 = (FastNoise::Max *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Max, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Max const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Max *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Max const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_Max(void *self)
{
  FastNoise::Max *arg1 = (FastNoise::Max *)self;
  delete arg1;
}

static swig_class SwigClassPowFloat;

SWIGINTERN VALUE
_wrap_PowFloat_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::PowFloat *arg1 = (FastNoise::PowFloat *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__PowFloat, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::PowFloat const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::PowFloat *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::PowFloat const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_PowFloat_SetValue__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::PowFloat *arg1 = (FastNoise::PowFloat *)0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__PowFloat, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::PowFloat *", "SetValue", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::PowFloat *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetValue", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetValue", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetValue(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_PowFloat_SetValue__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::PowFloat *arg1 = (FastNoise::PowFloat *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__PowFloat, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::PowFloat *", "SetValue", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::PowFloat *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetValue", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetValue(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_PowFloat_SetValue(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3)
    SWIG_fail;
  for (ii = 1; (ii < argc); ++ii)
  {
    argv[ii] = args[ii - 1];
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__PowFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_SmartNodeArgT_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_PowFloat_SetValue__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__PowFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_PowFloat_SetValue__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 3, "PowFloat.SetValue",
                              "    void PowFloat.SetValue(FastNoise::SmartNodeArg< > gen)\n"
                              "    void PowFloat.SetValue(float value)\n");

  return Qnil;
}

SWIGINTERN VALUE
_wrap_PowFloat_SetPow__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::PowFloat *arg1 = (FastNoise::PowFloat *)0;

  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__PowFloat, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::PowFloat *", "SetPow", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::PowFloat *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetPow", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetPow", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetPow(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_PowFloat_SetPow__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::PowFloat *arg1 = (FastNoise::PowFloat *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__PowFloat, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::PowFloat *", "SetPow", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::PowFloat *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetPow", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetPow(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_PowFloat_SetPow(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3)
    SWIG_fail;
  for (ii = 1; (ii < argc); ++ii)
  {
    argv[ii] = args[ii - 1];
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__PowFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_SmartNodeArgT_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_PowFloat_SetPow__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__PowFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_PowFloat_SetPow__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 3, "PowFloat.SetPow",
                              "    void PowFloat.SetPow(FastNoise::SmartNodeArg< > gen)\n"
                              "    void PowFloat.SetPow(float value)\n");

  return Qnil;
}

SWIGINTERN void
free_FastNoise_PowFloat(void *self)
{
  FastNoise::PowFloat *arg1 = (FastNoise::PowFloat *)self;
  delete arg1;
}

static swig_class SwigClassPowInt;

SWIGINTERN VALUE
_wrap_PowInt_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::PowInt *arg1 = (FastNoise::PowInt *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__PowInt, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::PowInt const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::PowInt *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::PowInt const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_PowInt_SetValue(int argc, VALUE *argv, VALUE self)
{
  FastNoise::PowInt *arg1 = (FastNoise::PowInt *)0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__PowInt, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::PowInt *", "SetValue", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::PowInt *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetValue", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetValue", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetValue(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_PowInt_SetPow(int argc, VALUE *argv, VALUE self)
{
  FastNoise::PowInt *arg1 = (FastNoise::PowInt *)0;
  int arg2;
  void *argp1 = 0;
  int res1 = 0;
  int val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__PowInt, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::PowInt *", "SetPow", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::PowInt *>(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "int", "SetPow", 2, argv[0]));
  }
  arg2 = static_cast<int>(val2);
  (arg1)->SetPow(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_PowInt(void *self)
{
  FastNoise::PowInt *arg1 = (FastNoise::PowInt *)self;
  delete arg1;
}

static swig_class SwigClassMinSmooth;

SWIGINTERN VALUE
_wrap_MinSmooth_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::MinSmooth *arg1 = (FastNoise::MinSmooth *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__MinSmooth, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::MinSmooth const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::MinSmooth *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::MinSmooth const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_MinSmooth_SetSmoothness__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::MinSmooth *arg1 = (FastNoise::MinSmooth *)0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__MinSmooth, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::MinSmooth *", "SetSmoothness", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::MinSmooth *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSmoothness", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSmoothness", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetSmoothness(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_MinSmooth_SetSmoothness__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::MinSmooth *arg1 = (FastNoise::MinSmooth *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__MinSmooth, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::MinSmooth *", "SetSmoothness", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::MinSmooth *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetSmoothness", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetSmoothness(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_MinSmooth_SetSmoothness(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3)
    SWIG_fail;
  for (ii = 1; (ii < argc); ++ii)
  {
    argv[ii] = args[ii - 1];
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__MinSmooth, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_SmartNodeArgT_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_MinSmooth_SetSmoothness__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__MinSmooth, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_MinSmooth_SetSmoothness__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 3, "MinSmooth.SetSmoothness",
                              "    void MinSmooth.SetSmoothness(FastNoise::SmartNodeArg< > gen)\n"
                              "    void MinSmooth.SetSmoothness(float value)\n");

  return Qnil;
}

SWIGINTERN void
free_FastNoise_MinSmooth(void *self)
{
  FastNoise::MinSmooth *arg1 = (FastNoise::MinSmooth *)self;
  delete arg1;
}

static swig_class SwigClassMaxSmooth;

SWIGINTERN VALUE
_wrap_MaxSmooth_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::MaxSmooth *arg1 = (FastNoise::MaxSmooth *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__MaxSmooth, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::MaxSmooth const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::MaxSmooth *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::MaxSmooth const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_MaxSmooth_SetSmoothness__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::MaxSmooth *arg1 = (FastNoise::MaxSmooth *)0;

  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__MaxSmooth, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::MaxSmooth *", "SetSmoothness", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::MaxSmooth *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSmoothness", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSmoothness", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2);
      (arg1)->SetSmoothness(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_MaxSmooth_SetSmoothness__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::MaxSmooth *arg1 = (FastNoise::MaxSmooth *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__MaxSmooth, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::MaxSmooth *", "SetSmoothness", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::MaxSmooth *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetSmoothness", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetSmoothness(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_MaxSmooth_SetSmoothness(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3)
    SWIG_fail;
  for (ii = 1; (ii < argc); ++ii)
  {
    argv[ii] = args[ii - 1];
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__MaxSmooth, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_SmartNodeArgT_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_MaxSmooth_SetSmoothness__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__MaxSmooth, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_MaxSmooth_SetSmoothness__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 3, "MaxSmooth.SetSmoothness",
                              "    void MaxSmooth.SetSmoothness(FastNoise::SmartNodeArg< > gen)\n"
                              "    void MaxSmooth.SetSmoothness(float value)\n");

  return Qnil;
}

SWIGINTERN void
free_FastNoise_MaxSmooth(void *self)
{
  FastNoise::MaxSmooth *arg1 = (FastNoise::MaxSmooth *)self;
  delete arg1;
}

static swig_class SwigClassFade;

SWIGINTERN VALUE
_wrap_Fade_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Fade *arg1 = (FastNoise::Fade *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Fade, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Fade const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Fade *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Fade const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Fade_SetA(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Fade *arg1 = (FastNoise::Fade *)0;

  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Fade, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Fade *", "SetA", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Fade *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetA", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetA", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetA(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Fade_SetB(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Fade *arg1 = (FastNoise::Fade *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Fade, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Fade *", "SetB", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Fade *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetB", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetB", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetB(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Fade_SetFade__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Fade *arg1 = (FastNoise::Fade *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Fade, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Fade *", "SetFade", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Fade *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetFade", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetFade", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2);
      (arg1)->SetFade(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Fade_SetFade__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Fade *arg1 = (FastNoise::Fade *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Fade, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Fade *", "SetFade", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Fade *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetFade", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetFade(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_Fade_SetFade(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3)
    SWIG_fail;
  for (ii = 1; (ii < argc); ++ii)
  {
    argv[ii] = args[ii - 1];
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__Fade, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_SmartNodeArgT_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_Fade_SetFade__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__Fade, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_Fade_SetFade__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 3, "Fade.SetFade",
                              "    void Fade.SetFade(FastNoise::SmartNodeArg< > gen)\n"
                              "    void Fade.SetFade(float value)\n");

  return Qnil;
}

SWIGINTERN void
free_FastNoise_Fade(void *self)
{
  FastNoise::Fade *arg1 = (FastNoise::Fade *)self;
  delete arg1;
}

static swig_class SwigClassCellular;

SWIGINTERN VALUE
_wrap_Cellular_SetJitterModifier__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Cellular *arg1 = (FastNoise::Cellular *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Cellular, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Cellular *", "SetJitterModifier", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Cellular *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetJitterModifier", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetJitterModifier", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetJitterModifier(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Cellular_SetJitterModifier__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Cellular *arg1 = (FastNoise::Cellular *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Cellular, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Cellular *", "SetJitterModifier", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Cellular *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetJitterModifier", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetJitterModifier(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_Cellular_SetJitterModifier(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3)
    SWIG_fail;
  for (ii = 1; (ii < argc); ++ii)
  {
    argv[ii] = args[ii - 1];
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__Cellular, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_SmartNodeArgT_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_Cellular_SetJitterModifier__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__Cellular, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_Cellular_SetJitterModifier__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 3, "Cellular.SetJitterModifier",
                              "    void Cellular.SetJitterModifier(FastNoise::SmartNodeArg< > gen)\n"
                              "    void Cellular.SetJitterModifier(float value)\n");

  return Qnil;
}

SWIGINTERN VALUE
_wrap_Cellular_SetDistanceFunction(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Cellular *arg1 = (FastNoise::Cellular *)0;
  FastNoise::DistanceFunction arg2;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Cellular, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Cellular *", "SetDistanceFunction", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Cellular *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_DistanceFunction, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "DistanceFunction", "SetDistanceFunction", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "DistanceFunction", "SetDistanceFunction", 2, argv[0]));
    }
    else
    {
      arg2 = *(reinterpret_cast<FastNoise::DistanceFunction *>(argp2));
    }
  }
  (arg1)->SetDistanceFunction(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Cellular_allocate(VALUE self)
#else
_wrap_Cellular_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_FastNoise__Cellular);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}

SWIGINTERN void
free_FastNoise_Cellular(void *self)
{
  FastNoise::Cellular *arg1 = (FastNoise::Cellular *)self;
  delete arg1;
}

static swig_class SwigClassCellularValue;

SWIGINTERN VALUE
_wrap_CellularValue_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::CellularValue *arg1 = (FastNoise::CellularValue *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__CellularValue, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::CellularValue const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::CellularValue *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::CellularValue const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_CellularValue_SetValueIndex(int argc, VALUE *argv, VALUE self)
{
  FastNoise::CellularValue *arg1 = (FastNoise::CellularValue *)0;
  int arg2;
  void *argp1 = 0;
  int res1 = 0;
  int val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__CellularValue, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::CellularValue *", "SetValueIndex", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::CellularValue *>(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "int", "SetValueIndex", 2, argv[0]));
  }
  arg2 = static_cast<int>(val2);
  (arg1)->SetValueIndex(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_CellularValue(void *self)
{
  FastNoise::CellularValue *arg1 = (FastNoise::CellularValue *)self;
  delete arg1;
}

static swig_class SwigClassCellularDistance;

SWIGINTERN VALUE
_wrap_CellularDistance_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::CellularDistance *arg1 = (FastNoise::CellularDistance *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__CellularDistance, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::CellularDistance const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::CellularDistance *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::CellularDistance const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_CellularDistance_SetDistanceIndex0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::CellularDistance *arg1 = (FastNoise::CellularDistance *)0;
  int arg2;
  void *argp1 = 0;
  int res1 = 0;
  int val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__CellularDistance, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::CellularDistance *", "SetDistanceIndex0", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::CellularDistance *>(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "int", "SetDistanceIndex0", 2, argv[0]));
  }
  arg2 = static_cast<int>(val2);
  (arg1)->SetDistanceIndex0(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_CellularDistance_SetDistanceIndex1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::CellularDistance *arg1 = (FastNoise::CellularDistance *)0;
  int arg2;
  void *argp1 = 0;
  int res1 = 0;
  int val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__CellularDistance, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::CellularDistance *", "SetDistanceIndex1", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::CellularDistance *>(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "int", "SetDistanceIndex1", 2, argv[0]));
  }
  arg2 = static_cast<int>(val2);
  (arg1)->SetDistanceIndex1(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_CellularDistance_SetReturnType(int argc, VALUE *argv, VALUE self)
{
  FastNoise::CellularDistance *arg1 = (FastNoise::CellularDistance *)0;
  FastNoise::CellularDistance::ReturnType arg2;
  void *argp1 = 0;
  int res1 = 0;
  int val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__CellularDistance, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::CellularDistance *", "SetReturnType", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::CellularDistance *>(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "FastNoise::CellularDistance::ReturnType", "SetReturnType", 2, argv[0]));
  }
  arg2 = static_cast<FastNoise::CellularDistance::ReturnType>(val2);
  (arg1)->SetReturnType(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_CellularDistance(void *self)
{
  FastNoise::CellularDistance *arg1 = (FastNoise::CellularDistance *)self;
  delete arg1;
}

static swig_class SwigClassCellularLookup;

SWIGINTERN VALUE
_wrap_CellularLookup_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::CellularLookup *arg1 = (FastNoise::CellularLookup *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__CellularLookup, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::CellularLookup const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::CellularLookup *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::CellularLookup const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_CellularLookup_SetLookup(int argc, VALUE *argv, VALUE self)
{
  FastNoise::CellularLookup *arg1 = (FastNoise::CellularLookup *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__CellularLookup, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::CellularLookup *", "SetLookup", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::CellularLookup *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetLookup", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetLookup", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetLookup(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_CellularLookup_SetLookupFrequency(int argc, VALUE *argv, VALUE self)
{
  FastNoise::CellularLookup *arg1 = (FastNoise::CellularLookup *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__CellularLookup, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::CellularLookup *", "SetLookupFrequency", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::CellularLookup *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetLookupFrequency", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetLookupFrequency(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_CellularLookup(void *self)
{
  FastNoise::CellularLookup *arg1 = (FastNoise::CellularLookup *)self;
  delete arg1;
}

static swig_class SwigClassDomainWarp;

SWIGINTERN VALUE
_wrap_DomainWarp_SetSource(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainWarp *arg1 = (FastNoise::DomainWarp *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainWarp, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainWarp *", "SetSource", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainWarp *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetSource(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_DomainWarp_SetWarpAmplitude__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainWarp *arg1 = (FastNoise::DomainWarp *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainWarp, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainWarp *", "SetWarpAmplitude", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainWarp *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetWarpAmplitude", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetWarpAmplitude", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetWarpAmplitude(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_DomainWarp_SetWarpAmplitude__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainWarp *arg1 = (FastNoise::DomainWarp *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainWarp, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainWarp *", "SetWarpAmplitude", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainWarp *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetWarpAmplitude", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetWarpAmplitude(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_DomainWarp_SetWarpAmplitude(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3)
    SWIG_fail;
  for (ii = 1; (ii < argc); ++ii)
  {
    argv[ii] = args[ii - 1];
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__DomainWarp, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_SmartNodeArgT_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_DomainWarp_SetWarpAmplitude__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__DomainWarp, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_DomainWarp_SetWarpAmplitude__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 3, "DomainWarp.SetWarpAmplitude",
                              "    void DomainWarp.SetWarpAmplitude(FastNoise::SmartNodeArg< > gen)\n"
                              "    void DomainWarp.SetWarpAmplitude(float value)\n");

  return Qnil;
}

SWIGINTERN VALUE
_wrap_DomainWarp_SetWarpFrequency(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainWarp *arg1 = (FastNoise::DomainWarp *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainWarp, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainWarp *", "SetWarpFrequency", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainWarp *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetWarpFrequency", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetWarpFrequency(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_DomainWarp_allocate(VALUE self)
#else
_wrap_DomainWarp_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_FastNoise__DomainWarp);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}

SWIGINTERN void
free_FastNoise_DomainWarp(void *self)
{
  FastNoise::DomainWarp *arg1 = (FastNoise::DomainWarp *)self;
  delete arg1;
}

static swig_class SwigClassDomainWarpGradient;

SWIGINTERN VALUE
_wrap_DomainWarpGradient_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainWarpGradient *arg1 = (FastNoise::DomainWarpGradient *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainWarpGradient, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainWarpGradient const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainWarpGradient *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::DomainWarpGradient const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_DomainWarpGradient(void *self)
{
  FastNoise::DomainWarpGradient *arg1 = (FastNoise::DomainWarpGradient *)self;
  delete arg1;
}

static swig_class SwigClassDomainWarpFractalProgressive;

SWIGINTERN VALUE
_wrap_DomainWarpFractalProgressive_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainWarpFractalProgressive *arg1 = (FastNoise::DomainWarpFractalProgressive *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainWarpFractalProgressive, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainWarpFractalProgressive const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainWarpFractalProgressive *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::DomainWarpFractalProgressive const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_DomainWarpFractalProgressive(void *self)
{
  FastNoise::DomainWarpFractalProgressive *arg1 = (FastNoise::DomainWarpFractalProgressive *)self;
  delete arg1;
}

static swig_class SwigClassDomainWarpFractalIndependant;

SWIGINTERN VALUE
_wrap_DomainWarpFractalIndependant_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainWarpFractalIndependant *arg1 = (FastNoise::DomainWarpFractalIndependant *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainWarpFractalIndependant, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainWarpFractalIndependant const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainWarpFractalIndependant *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::DomainWarpFractalIndependant const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_DomainWarpFractalIndependant(void *self)
{
  FastNoise::DomainWarpFractalIndependant *arg1 = (FastNoise::DomainWarpFractalIndependant *)self;
  delete arg1;
}

static swig_class SwigClassFractalFBm;

SWIGINTERN VALUE
_wrap_FractalFBm_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::FractalFBm *arg1 = (FastNoise::FractalFBm *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__FractalFBm, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::FractalFBm const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::FractalFBm *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::FractalFBm const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_FractalFBm(void *self)
{
  FastNoise::FractalFBm *arg1 = (FastNoise::FractalFBm *)self;
  delete arg1;
}

static swig_class SwigClassFractalRidged;

SWIGINTERN VALUE
_wrap_FractalRidged_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::FractalRidged *arg1 = (FastNoise::FractalRidged *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__FractalRidged, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::FractalRidged const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::FractalRidged *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::FractalRidged const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_FractalRidged(void *self)
{
  FastNoise::FractalRidged *arg1 = (FastNoise::FractalRidged *)self;
  delete arg1;
}

static swig_class SwigClassFractalPingPong;

SWIGINTERN VALUE
_wrap_FractalPingPong_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::FractalPingPong *arg1 = (FastNoise::FractalPingPong *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__FractalPingPong, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::FractalPingPong const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::FractalPingPong *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::FractalPingPong const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_FractalPingPong_SetPingPongStrength__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::FractalPingPong *arg1 = (FastNoise::FractalPingPong *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__FractalPingPong, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::FractalPingPong *", "SetPingPongStrength", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::FractalPingPong *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetPingPongStrength", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetPingPongStrength(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_FractalPingPong_SetPingPongStrength__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::FractalPingPong *arg1 = (FastNoise::FractalPingPong *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__FractalPingPong, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::FractalPingPong *", "SetPingPongStrength", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::FractalPingPong *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetPingPongStrength", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetPingPongStrength", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetPingPongStrength(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_FractalPingPong_SetPingPongStrength(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3)
    SWIG_fail;
  for (ii = 1; (ii < argc); ++ii)
  {
    argv[ii] = args[ii - 1];
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__FractalPingPong, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_SmartNodeArgT_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_FractalPingPong_SetPingPongStrength__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__FractalPingPong, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_FractalPingPong_SetPingPongStrength__SWIG_0(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 3, "FractalPingPong.SetPingPongStrength",
                              "    void FractalPingPong.SetPingPongStrength(float value)\n"
                              "    void FractalPingPong.SetPingPongStrength(FastNoise::SmartNodeArg< > gen)\n");

  return Qnil;
}

SWIGINTERN void
free_FastNoise_FractalPingPong(void *self)
{
  FastNoise::FractalPingPong *arg1 = (FastNoise::FractalPingPong *)self;
  delete arg1;
}

SWIGINTERN VALUE
_wrap_kDim_Strings_get(VALUE self)
{
  VALUE _val;

  _val = SWIG_NewPointerObj(SWIG_as_voidptr(FastNoise::kDim_Strings), SWIGTYPE_p_p_char, 0);
  return _val;
}

SWIGINTERN VALUE
_wrap_kDistanceFunction_Strings_get(VALUE self)
{
  VALUE _val;

  _val = SWIG_NewPointerObj(SWIG_as_voidptr(FastNoise::kDistanceFunction_Strings), SWIGTYPE_p_p_char, 0);
  return _val;
}

static swig_class SwigClassOutputMinMax;

SWIGINTERN VALUE
_wrap_OutputMinMax_min_set(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OutputMinMax *arg1 = (FastNoise::OutputMinMax *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__OutputMinMax, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::OutputMinMax *", "min", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::OutputMinMax *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "min", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  if (arg1)
    (arg1)->min = arg2;
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_OutputMinMax_min_get(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OutputMinMax *arg1 = (FastNoise::OutputMinMax *)0;
  void *argp1 = 0;
  int res1 = 0;
  float result;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__OutputMinMax, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::OutputMinMax *", "min", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::OutputMinMax *>(argp1);
  result = (float)((arg1)->min);
  vresult = SWIG_From_float(static_cast<float>(result));
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_OutputMinMax_max_set(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OutputMinMax *arg1 = (FastNoise::OutputMinMax *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__OutputMinMax, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::OutputMinMax *", "max", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::OutputMinMax *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "max", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  if (arg1)
    (arg1)->max = arg2;
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_OutputMinMax_max_get(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OutputMinMax *arg1 = (FastNoise::OutputMinMax *)0;
  void *argp1 = 0;
  int res1 = 0;
  float result;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__OutputMinMax, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::OutputMinMax *", "max", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::OutputMinMax *>(argp1);
  result = (float)((arg1)->max);
  vresult = SWIG_From_float(static_cast<float>(result));
  return vresult;
fail:
  return Qnil;
}

/*
  Document-method: Fastnoise2::OutputMinMax.<<

  call-seq:
    <<(v) -> OutputMinMax
    <<(v) -> OutputMinMax

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap_OutputMinMax___lshift____SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OutputMinMax *arg1 = (FastNoise::OutputMinMax *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;
  FastNoise::OutputMinMax *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__OutputMinMax, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::OutputMinMax *", "operator <<", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::OutputMinMax *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "operator <<", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  result = (FastNoise::OutputMinMax *)&(arg1)->operator<<(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__OutputMinMax, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_OutputMinMax___lshift____SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OutputMinMax *arg1 = (FastNoise::OutputMinMax *)0;
  FastNoise::OutputMinMax *arg2 = 0;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;
  FastNoise::OutputMinMax *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__OutputMinMax, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::OutputMinMax *", "operator <<", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::OutputMinMax *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_FastNoise__OutputMinMax, 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::OutputMinMax const &", "operator <<", 2, argv[0]));
  }
  if (!argp2)
  {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::OutputMinMax const &", "operator <<", 2, argv[0]));
  }
  arg2 = reinterpret_cast<FastNoise::OutputMinMax *>(argp2);
  result = (FastNoise::OutputMinMax *)&(arg1)->operator<<((FastNoise::OutputMinMax const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__OutputMinMax, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_OutputMinMax___lshift__(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3)
    SWIG_fail;
  for (ii = 1; (ii < argc); ++ii)
  {
    argv[ii] = args[ii - 1];
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__OutputMinMax, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FastNoise__OutputMinMax, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_OutputMinMax___lshift____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__OutputMinMax, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_OutputMinMax___lshift____SWIG_0(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 3, "OutputMinMax.__lshift__",
                              "    FastNoise::OutputMinMax OutputMinMax.__lshift__(float v)\n"
                              "    FastNoise::OutputMinMax & OutputMinMax.__lshift__(FastNoise::OutputMinMax const &v)\n");

  return Qnil;
}

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OutputMinMax_allocate(VALUE self)
#else
_wrap_OutputMinMax_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_FastNoise__OutputMinMax);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}

SWIGINTERN VALUE
_wrap_new_OutputMinMax(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OutputMinMax *result = 0;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  result = (FastNoise::OutputMinMax *)new FastNoise::OutputMinMax();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_OutputMinMax(void *self)
{
  FastNoise::OutputMinMax *arg1 = (FastNoise::OutputMinMax *)self;
  delete arg1;
}

static swig_class SwigClassGenerator;

SWIGINTERN void
free_FastNoise_Generator(void *self)
{
  FastNoise::Generator *arg1 = (FastNoise::Generator *)self;
  delete arg1;
}

SWIGINTERN VALUE
_wrap_Generator_GetSIMDLevel(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Generator *arg1 = (FastNoise::Generator *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastSIMD::eLevel result;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Generator, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Generator const *", "GetSIMDLevel", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Generator *>(argp1);
  result = ((FastNoise::Generator const *)arg1)->GetSIMDLevel();
  vresult = SWIG_NewPointerObj((new FastSIMD::eLevel(static_cast<const FastSIMD::eLevel &>(result))), SWIGTYPE_p_FastSIMD__eLevel, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Generator_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Generator *arg1 = (FastNoise::Generator *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Generator, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Generator const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Generator *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Generator const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Generator_GenUniformGrid2D(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Generator *arg1 = (FastNoise::Generator *)0;
  float *arg2 = (float *)0;
  int arg3;
  int arg4;
  int arg5;
  int arg6;
  float arg7;
  int arg8;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2 = 0;
  int res2 = 0;
  int val3;
  int ecode3 = 0;
  int val4;
  int ecode4 = 0;
  int val5;
  int ecode5 = 0;
  int val6;
  int ecode6 = 0;
  float val7;
  int ecode7 = 0;
  int val8;
  int ecode8 = 0;
  FastNoise::OutputMinMax result;
  VALUE vresult = Qnil;

  if ((argc < 7) || (argc > 7))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Generator, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Generator const *", "GenUniformGrid2D", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Generator *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "float *", "GenUniformGrid2D", 2, argv[0]));
  }
  arg2 = reinterpret_cast<float *>(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError("", "int", "GenUniformGrid2D", 3, argv[1]));
  }
  arg3 = static_cast<int>(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError("", "int", "GenUniformGrid2D", 4, argv[2]));
  }
  arg4 = static_cast<int>(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError("", "int", "GenUniformGrid2D", 5, argv[3]));
  }
  arg5 = static_cast<int>(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError("", "int", "GenUniformGrid2D", 6, argv[4]));
  }
  arg6 = static_cast<int>(val6);
  ecode7 = SWIG_AsVal_float(argv[5], &val7);
  if (!SWIG_IsOK(ecode7))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError("", "float", "GenUniformGrid2D", 7, argv[5]));
  }
  arg7 = static_cast<float>(val7);
  ecode8 = SWIG_AsVal_int(argv[6], &val8);
  if (!SWIG_IsOK(ecode8))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError("", "int", "GenUniformGrid2D", 8, argv[6]));
  }
  arg8 = static_cast<int>(val8);
  result = ((FastNoise::Generator const *)arg1)->GenUniformGrid2D(arg2, arg3, arg4, arg5, arg6, arg7, arg8);
  vresult = SWIG_NewPointerObj((new FastNoise::OutputMinMax(static_cast<const FastNoise::OutputMinMax &>(result))), SWIGTYPE_p_FastNoise__OutputMinMax, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Generator_GenUniformGrid3D(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Generator *arg1 = (FastNoise::Generator *)0;
  float *arg2 = (float *)0;
  int arg3;
  int arg4;
  int arg5;
  int arg6;
  int arg7;
  int arg8;
  float arg9;
  int arg10;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2 = 0;
  int res2 = 0;
  int val3;
  int ecode3 = 0;
  int val4;
  int ecode4 = 0;
  int val5;
  int ecode5 = 0;
  int val6;
  int ecode6 = 0;
  int val7;
  int ecode7 = 0;
  int val8;
  int ecode8 = 0;
  float val9;
  int ecode9 = 0;
  int val10;
  int ecode10 = 0;
  FastNoise::OutputMinMax result;
  VALUE vresult = Qnil;

  if ((argc < 9) || (argc > 9))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Generator, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Generator const *", "GenUniformGrid3D", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Generator *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "float *", "GenUniformGrid3D", 2, argv[0]));
  }
  arg2 = reinterpret_cast<float *>(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError("", "int", "GenUniformGrid3D", 3, argv[1]));
  }
  arg3 = static_cast<int>(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError("", "int", "GenUniformGrid3D", 4, argv[2]));
  }
  arg4 = static_cast<int>(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError("", "int", "GenUniformGrid3D", 5, argv[3]));
  }
  arg5 = static_cast<int>(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError("", "int", "GenUniformGrid3D", 6, argv[4]));
  }
  arg6 = static_cast<int>(val6);
  ecode7 = SWIG_AsVal_int(argv[5], &val7);
  if (!SWIG_IsOK(ecode7))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError("", "int", "GenUniformGrid3D", 7, argv[5]));
  }
  arg7 = static_cast<int>(val7);
  ecode8 = SWIG_AsVal_int(argv[6], &val8);
  if (!SWIG_IsOK(ecode8))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError("", "int", "GenUniformGrid3D", 8, argv[6]));
  }
  arg8 = static_cast<int>(val8);
  ecode9 = SWIG_AsVal_float(argv[7], &val9);
  if (!SWIG_IsOK(ecode9))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError("", "float", "GenUniformGrid3D", 9, argv[7]));
  }
  arg9 = static_cast<float>(val9);
  ecode10 = SWIG_AsVal_int(argv[8], &val10);
  if (!SWIG_IsOK(ecode10))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode10), Ruby_Format_TypeError("", "int", "GenUniformGrid3D", 10, argv[8]));
  }
  arg10 = static_cast<int>(val10);
  result = ((FastNoise::Generator const *)arg1)->GenUniformGrid3D(arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
  vresult = SWIG_NewPointerObj((new FastNoise::OutputMinMax(static_cast<const FastNoise::OutputMinMax &>(result))), SWIGTYPE_p_FastNoise__OutputMinMax, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Generator_GenUniformGrid4D(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Generator *arg1 = (FastNoise::Generator *)0;
  float *arg2 = (float *)0;
  int arg3;
  int arg4;
  int arg5;
  int arg6;
  int arg7;
  int arg8;
  int arg9;
  int arg10;
  float arg11;
  int arg12;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2 = 0;
  int res2 = 0;
  int val3;
  int ecode3 = 0;
  int val4;
  int ecode4 = 0;
  int val5;
  int ecode5 = 0;
  int val6;
  int ecode6 = 0;
  int val7;
  int ecode7 = 0;
  int val8;
  int ecode8 = 0;
  int val9;
  int ecode9 = 0;
  int val10;
  int ecode10 = 0;
  float val11;
  int ecode11 = 0;
  int val12;
  int ecode12 = 0;
  FastNoise::OutputMinMax result;
  VALUE vresult = Qnil;

  if ((argc < 11) || (argc > 11))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 11)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Generator, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Generator const *", "GenUniformGrid4D", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Generator *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "float *", "GenUniformGrid4D", 2, argv[0]));
  }
  arg2 = reinterpret_cast<float *>(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError("", "int", "GenUniformGrid4D", 3, argv[1]));
  }
  arg3 = static_cast<int>(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError("", "int", "GenUniformGrid4D", 4, argv[2]));
  }
  arg4 = static_cast<int>(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError("", "int", "GenUniformGrid4D", 5, argv[3]));
  }
  arg5 = static_cast<int>(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError("", "int", "GenUniformGrid4D", 6, argv[4]));
  }
  arg6 = static_cast<int>(val6);
  ecode7 = SWIG_AsVal_int(argv[5], &val7);
  if (!SWIG_IsOK(ecode7))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError("", "int", "GenUniformGrid4D", 7, argv[5]));
  }
  arg7 = static_cast<int>(val7);
  ecode8 = SWIG_AsVal_int(argv[6], &val8);
  if (!SWIG_IsOK(ecode8))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError("", "int", "GenUniformGrid4D", 8, argv[6]));
  }
  arg8 = static_cast<int>(val8);
  ecode9 = SWIG_AsVal_int(argv[7], &val9);
  if (!SWIG_IsOK(ecode9))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError("", "int", "GenUniformGrid4D", 9, argv[7]));
  }
  arg9 = static_cast<int>(val9);
  ecode10 = SWIG_AsVal_int(argv[8], &val10);
  if (!SWIG_IsOK(ecode10))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode10), Ruby_Format_TypeError("", "int", "GenUniformGrid4D", 10, argv[8]));
  }
  arg10 = static_cast<int>(val10);
  ecode11 = SWIG_AsVal_float(argv[9], &val11);
  if (!SWIG_IsOK(ecode11))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode11), Ruby_Format_TypeError("", "float", "GenUniformGrid4D", 11, argv[9]));
  }
  arg11 = static_cast<float>(val11);
  ecode12 = SWIG_AsVal_int(argv[10], &val12);
  if (!SWIG_IsOK(ecode12))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode12), Ruby_Format_TypeError("", "int", "GenUniformGrid4D", 12, argv[10]));
  }
  arg12 = static_cast<int>(val12);
  result = ((FastNoise::Generator const *)arg1)->GenUniformGrid4D(arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
  vresult = SWIG_NewPointerObj((new FastNoise::OutputMinMax(static_cast<const FastNoise::OutputMinMax &>(result))), SWIGTYPE_p_FastNoise__OutputMinMax, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Generator_GenTileable2D(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Generator *arg1 = (FastNoise::Generator *)0;
  float *arg2 = (float *)0;
  int arg3;
  int arg4;
  float arg5;
  int arg6;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2 = 0;
  int res2 = 0;
  int val3;
  int ecode3 = 0;
  int val4;
  int ecode4 = 0;
  float val5;
  int ecode5 = 0;
  int val6;
  int ecode6 = 0;
  FastNoise::OutputMinMax result;
  VALUE vresult = Qnil;

  if ((argc < 5) || (argc > 5))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Generator, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Generator const *", "GenTileable2D", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Generator *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "float *", "GenTileable2D", 2, argv[0]));
  }
  arg2 = reinterpret_cast<float *>(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError("", "int", "GenTileable2D", 3, argv[1]));
  }
  arg3 = static_cast<int>(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError("", "int", "GenTileable2D", 4, argv[2]));
  }
  arg4 = static_cast<int>(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError("", "float", "GenTileable2D", 5, argv[3]));
  }
  arg5 = static_cast<float>(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError("", "int", "GenTileable2D", 6, argv[4]));
  }
  arg6 = static_cast<int>(val6);
  result = ((FastNoise::Generator const *)arg1)->GenTileable2D(arg2, arg3, arg4, arg5, arg6);
  vresult = SWIG_NewPointerObj((new FastNoise::OutputMinMax(static_cast<const FastNoise::OutputMinMax &>(result))), SWIGTYPE_p_FastNoise__OutputMinMax, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Generator_GenPositionArray2D(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Generator *arg1 = (FastNoise::Generator *)0;
  float *arg2 = (float *)0;
  int arg3;
  float *arg4 = (float *)0;
  float *arg5 = (float *)0;
  float arg6;
  float arg7;
  int arg8;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2 = 0;
  int res2 = 0;
  int val3;
  int ecode3 = 0;
  void *argp4 = 0;
  int res4 = 0;
  void *argp5 = 0;
  int res5 = 0;
  float val6;
  int ecode6 = 0;
  float val7;
  int ecode7 = 0;
  int val8;
  int ecode8 = 0;
  FastNoise::OutputMinMax result;
  VALUE vresult = Qnil;

  if ((argc < 7) || (argc > 7))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Generator, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Generator const *", "GenPositionArray2D", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Generator *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "float *", "GenPositionArray2D", 2, argv[0]));
  }
  arg2 = reinterpret_cast<float *>(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError("", "int", "GenPositionArray2D", 3, argv[1]));
  }
  arg3 = static_cast<int>(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res4))
  {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError("", "float const *", "GenPositionArray2D", 4, argv[2]));
  }
  arg4 = reinterpret_cast<float *>(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res5))
  {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError("", "float const *", "GenPositionArray2D", 5, argv[3]));
  }
  arg5 = reinterpret_cast<float *>(argp5);
  ecode6 = SWIG_AsVal_float(argv[4], &val6);
  if (!SWIG_IsOK(ecode6))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError("", "float", "GenPositionArray2D", 6, argv[4]));
  }
  arg6 = static_cast<float>(val6);
  ecode7 = SWIG_AsVal_float(argv[5], &val7);
  if (!SWIG_IsOK(ecode7))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError("", "float", "GenPositionArray2D", 7, argv[5]));
  }
  arg7 = static_cast<float>(val7);
  ecode8 = SWIG_AsVal_int(argv[6], &val8);
  if (!SWIG_IsOK(ecode8))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError("", "int", "GenPositionArray2D", 8, argv[6]));
  }
  arg8 = static_cast<int>(val8);
  result = ((FastNoise::Generator const *)arg1)->GenPositionArray2D(arg2, arg3, (float const *)arg4, (float const *)arg5, arg6, arg7, arg8);
  vresult = SWIG_NewPointerObj((new FastNoise::OutputMinMax(static_cast<const FastNoise::OutputMinMax &>(result))), SWIGTYPE_p_FastNoise__OutputMinMax, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Generator_GenPositionArray3D(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Generator *arg1 = (FastNoise::Generator *)0;
  float *arg2 = (float *)0;
  int arg3;
  float *arg4 = (float *)0;
  float *arg5 = (float *)0;
  float *arg6 = (float *)0;
  float arg7;
  float arg8;
  float arg9;
  int arg10;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2 = 0;
  int res2 = 0;
  int val3;
  int ecode3 = 0;
  void *argp4 = 0;
  int res4 = 0;
  void *argp5 = 0;
  int res5 = 0;
  void *argp6 = 0;
  int res6 = 0;
  float val7;
  int ecode7 = 0;
  float val8;
  int ecode8 = 0;
  float val9;
  int ecode9 = 0;
  int val10;
  int ecode10 = 0;
  FastNoise::OutputMinMax result;
  VALUE vresult = Qnil;

  if ((argc < 9) || (argc > 9))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Generator, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Generator const *", "GenPositionArray3D", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Generator *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "float *", "GenPositionArray3D", 2, argv[0]));
  }
  arg2 = reinterpret_cast<float *>(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError("", "int", "GenPositionArray3D", 3, argv[1]));
  }
  arg3 = static_cast<int>(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res4))
  {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError("", "float const *", "GenPositionArray3D", 4, argv[2]));
  }
  arg4 = reinterpret_cast<float *>(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res5))
  {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError("", "float const *", "GenPositionArray3D", 5, argv[3]));
  }
  arg5 = reinterpret_cast<float *>(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res6))
  {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError("", "float const *", "GenPositionArray3D", 6, argv[4]));
  }
  arg6 = reinterpret_cast<float *>(argp6);
  ecode7 = SWIG_AsVal_float(argv[5], &val7);
  if (!SWIG_IsOK(ecode7))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError("", "float", "GenPositionArray3D", 7, argv[5]));
  }
  arg7 = static_cast<float>(val7);
  ecode8 = SWIG_AsVal_float(argv[6], &val8);
  if (!SWIG_IsOK(ecode8))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError("", "float", "GenPositionArray3D", 8, argv[6]));
  }
  arg8 = static_cast<float>(val8);
  ecode9 = SWIG_AsVal_float(argv[7], &val9);
  if (!SWIG_IsOK(ecode9))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError("", "float", "GenPositionArray3D", 9, argv[7]));
  }
  arg9 = static_cast<float>(val9);
  ecode10 = SWIG_AsVal_int(argv[8], &val10);
  if (!SWIG_IsOK(ecode10))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode10), Ruby_Format_TypeError("", "int", "GenPositionArray3D", 10, argv[8]));
  }
  arg10 = static_cast<int>(val10);
  result = ((FastNoise::Generator const *)arg1)->GenPositionArray3D(arg2, arg3, (float const *)arg4, (float const *)arg5, (float const *)arg6, arg7, arg8, arg9, arg10);
  vresult = SWIG_NewPointerObj((new FastNoise::OutputMinMax(static_cast<const FastNoise::OutputMinMax &>(result))), SWIGTYPE_p_FastNoise__OutputMinMax, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Generator_GenPositionArray4D(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Generator *arg1 = (FastNoise::Generator *)0;
  float *arg2 = (float *)0;
  int arg3;
  float *arg4 = (float *)0;
  float *arg5 = (float *)0;
  float *arg6 = (float *)0;
  float *arg7 = (float *)0;
  float arg8;
  float arg9;
  float arg10;
  float arg11;
  int arg12;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2 = 0;
  int res2 = 0;
  int val3;
  int ecode3 = 0;
  void *argp4 = 0;
  int res4 = 0;
  void *argp5 = 0;
  int res5 = 0;
  void *argp6 = 0;
  int res6 = 0;
  void *argp7 = 0;
  int res7 = 0;
  float val8;
  int ecode8 = 0;
  float val9;
  int ecode9 = 0;
  float val10;
  int ecode10 = 0;
  float val11;
  int ecode11 = 0;
  int val12;
  int ecode12 = 0;
  FastNoise::OutputMinMax result;
  VALUE vresult = Qnil;

  if ((argc < 11) || (argc > 11))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 11)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Generator, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Generator const *", "GenPositionArray4D", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Generator *>(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res2))
  {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "float *", "GenPositionArray4D", 2, argv[0]));
  }
  arg2 = reinterpret_cast<float *>(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError("", "int", "GenPositionArray4D", 3, argv[1]));
  }
  arg3 = static_cast<int>(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res4))
  {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError("", "float const *", "GenPositionArray4D", 4, argv[2]));
  }
  arg4 = reinterpret_cast<float *>(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res5))
  {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError("", "float const *", "GenPositionArray4D", 5, argv[3]));
  }
  arg5 = reinterpret_cast<float *>(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res6))
  {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError("", "float const *", "GenPositionArray4D", 6, argv[4]));
  }
  arg6 = reinterpret_cast<float *>(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_float, 0 | 0);
  if (!SWIG_IsOK(res7))
  {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError("", "float const *", "GenPositionArray4D", 7, argv[5]));
  }
  arg7 = reinterpret_cast<float *>(argp7);
  ecode8 = SWIG_AsVal_float(argv[6], &val8);
  if (!SWIG_IsOK(ecode8))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError("", "float", "GenPositionArray4D", 8, argv[6]));
  }
  arg8 = static_cast<float>(val8);
  ecode9 = SWIG_AsVal_float(argv[7], &val9);
  if (!SWIG_IsOK(ecode9))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError("", "float", "GenPositionArray4D", 9, argv[7]));
  }
  arg9 = static_cast<float>(val9);
  ecode10 = SWIG_AsVal_float(argv[8], &val10);
  if (!SWIG_IsOK(ecode10))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode10), Ruby_Format_TypeError("", "float", "GenPositionArray4D", 10, argv[8]));
  }
  arg10 = static_cast<float>(val10);
  ecode11 = SWIG_AsVal_float(argv[9], &val11);
  if (!SWIG_IsOK(ecode11))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode11), Ruby_Format_TypeError("", "float", "GenPositionArray4D", 11, argv[9]));
  }
  arg11 = static_cast<float>(val11);
  ecode12 = SWIG_AsVal_int(argv[10], &val12);
  if (!SWIG_IsOK(ecode12))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode12), Ruby_Format_TypeError("", "int", "GenPositionArray4D", 12, argv[10]));
  }
  arg12 = static_cast<int>(val12);
  result = ((FastNoise::Generator const *)arg1)->GenPositionArray4D(arg2, arg3, (float const *)arg4, (float const *)arg5, (float const *)arg6, (float const *)arg7, arg8, arg9, arg10, arg11, arg12);
  vresult = SWIG_NewPointerObj((new FastNoise::OutputMinMax(static_cast<const FastNoise::OutputMinMax &>(result))), SWIGTYPE_p_FastNoise__OutputMinMax, SWIG_POINTER_OWN | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Generator_GenSingle2D(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Generator *arg1 = (FastNoise::Generator *)0;
  float arg2;
  float arg3;
  int arg4;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;
  float val3;
  int ecode3 = 0;
  int val4;
  int ecode4 = 0;
  float result;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Generator, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Generator const *", "GenSingle2D", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Generator *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "GenSingle2D", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError("", "float", "GenSingle2D", 3, argv[1]));
  }
  arg3 = static_cast<float>(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError("", "int", "GenSingle2D", 4, argv[2]));
  }
  arg4 = static_cast<int>(val4);
  result = (float)((FastNoise::Generator const *)arg1)->GenSingle2D(arg2, arg3, arg4);
  vresult = SWIG_From_float(static_cast<float>(result));
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Generator_GenSingle3D(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Generator *arg1 = (FastNoise::Generator *)0;
  float arg2;
  float arg3;
  float arg4;
  int arg5;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;
  float val3;
  int ecode3 = 0;
  float val4;
  int ecode4 = 0;
  int val5;
  int ecode5 = 0;
  float result;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Generator, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Generator const *", "GenSingle3D", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Generator *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "GenSingle3D", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError("", "float", "GenSingle3D", 3, argv[1]));
  }
  arg3 = static_cast<float>(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError("", "float", "GenSingle3D", 4, argv[2]));
  }
  arg4 = static_cast<float>(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError("", "int", "GenSingle3D", 5, argv[3]));
  }
  arg5 = static_cast<int>(val5);
  result = (float)((FastNoise::Generator const *)arg1)->GenSingle3D(arg2, arg3, arg4, arg5);
  vresult = SWIG_From_float(static_cast<float>(result));
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Generator_GenSingle4D(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Generator *arg1 = (FastNoise::Generator *)0;
  float arg2;
  float arg3;
  float arg4;
  float arg5;
  int arg6;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;
  float val3;
  int ecode3 = 0;
  float val4;
  int ecode4 = 0;
  float val5;
  int ecode5 = 0;
  int val6;
  int ecode6 = 0;
  float result;
  VALUE vresult = Qnil;

  if ((argc < 5) || (argc > 5))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Generator, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Generator const *", "GenSingle4D", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Generator *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "GenSingle4D", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError("", "float", "GenSingle4D", 3, argv[1]));
  }
  arg3 = static_cast<float>(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError("", "float", "GenSingle4D", 4, argv[2]));
  }
  arg4 = static_cast<float>(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError("", "float", "GenSingle4D", 5, argv[3]));
  }
  arg5 = static_cast<float>(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError("", "int", "GenSingle4D", 6, argv[4]));
  }
  arg6 = static_cast<int>(val6);
  result = (float)((FastNoise::Generator const *)arg1)->GenSingle4D(arg2, arg3, arg4, arg5, arg6);
  vresult = SWIG_From_float(static_cast<float>(result));
  return vresult;
fail:
  return Qnil;
}

static swig_class SwigClassDomainScale;

SWIGINTERN VALUE
_wrap_DomainScale_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainScale *arg1 = (FastNoise::DomainScale *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainScale, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainScale const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainScale *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::DomainScale const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_DomainScale_SetSource(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainScale *arg1 = (FastNoise::DomainScale *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainScale, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainScale *", "SetSource", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainScale *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetSource(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_DomainScale_SetScale(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainScale *arg1 = (FastNoise::DomainScale *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainScale, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainScale *", "SetScale", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainScale *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetScale", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetScale(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_DomainScale(void *self)
{
  FastNoise::DomainScale *arg1 = (FastNoise::DomainScale *)self;
  delete arg1;
}

static swig_class SwigClassDomainOffset;

SWIGINTERN VALUE
_wrap_DomainOffset_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainOffset *arg1 = (FastNoise::DomainOffset *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainOffset, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainOffset const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainOffset *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::DomainOffset const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_DomainOffset_SetSource(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainOffset *arg1 = (FastNoise::DomainOffset *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainOffset, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainOffset *", "SetSource", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainOffset *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetSource(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_DomainOffset(void *self)
{
  FastNoise::DomainOffset *arg1 = (FastNoise::DomainOffset *)self;
  delete arg1;
}

static swig_class SwigClassDomainRotate;

SWIGINTERN VALUE
_wrap_DomainRotate_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainRotate *arg1 = (FastNoise::DomainRotate *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainRotate, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainRotate const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainRotate *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::DomainRotate const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_DomainRotate_SetSource(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainRotate *arg1 = (FastNoise::DomainRotate *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainRotate, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainRotate *", "SetSource", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainRotate *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetSource(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_DomainRotate_SetYaw(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainRotate *arg1 = (FastNoise::DomainRotate *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainRotate, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainRotate *", "SetYaw", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainRotate *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetYaw", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetYaw(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_DomainRotate_SetPitch(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainRotate *arg1 = (FastNoise::DomainRotate *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainRotate, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainRotate *", "SetPitch", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainRotate *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetPitch", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetPitch(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_DomainRotate_SetRoll(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainRotate *arg1 = (FastNoise::DomainRotate *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainRotate, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainRotate *", "SetRoll", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainRotate *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetRoll", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetRoll(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_DomainRotate(void *self)
{
  FastNoise::DomainRotate *arg1 = (FastNoise::DomainRotate *)self;
  delete arg1;
}

static swig_class SwigClassSeedOffset;

SWIGINTERN VALUE
_wrap_SeedOffset_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::SeedOffset *arg1 = (FastNoise::SeedOffset *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__SeedOffset, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::SeedOffset const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::SeedOffset *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::SeedOffset const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_SeedOffset_SetSource(int argc, VALUE *argv, VALUE self)
{
  FastNoise::SeedOffset *arg1 = (FastNoise::SeedOffset *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__SeedOffset, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::SeedOffset *", "SetSource", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::SeedOffset *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetSource(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_SeedOffset_SetOffset(int argc, VALUE *argv, VALUE self)
{
  FastNoise::SeedOffset *arg1 = (FastNoise::SeedOffset *)0;
  int arg2;
  void *argp1 = 0;
  int res1 = 0;
  int val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__SeedOffset, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::SeedOffset *", "SetOffset", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::SeedOffset *>(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "int", "SetOffset", 2, argv[0]));
  }
  arg2 = static_cast<int>(val2);
  (arg1)->SetOffset(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_SeedOffset(void *self)
{
  FastNoise::SeedOffset *arg1 = (FastNoise::SeedOffset *)self;
  delete arg1;
}

static swig_class SwigClassRemap;

SWIGINTERN VALUE
_wrap_Remap_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Remap *arg1 = (FastNoise::Remap *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Remap, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Remap const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Remap *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Remap const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Remap_SetSource(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Remap *arg1 = (FastNoise::Remap *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Remap, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Remap *", "SetSource", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Remap *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetSource(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Remap_SetRemap(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Remap *arg1 = (FastNoise::Remap *)0;
  float arg2;
  float arg3;
  float arg4;
  float arg5;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;
  float val3;
  int ecode3 = 0;
  float val4;
  int ecode4 = 0;
  float val5;
  int ecode5 = 0;

  if ((argc < 4) || (argc > 4))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Remap, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Remap *", "SetRemap", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Remap *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetRemap", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError("", "float", "SetRemap", 3, argv[1]));
  }
  arg3 = static_cast<float>(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError("", "float", "SetRemap", 4, argv[2]));
  }
  arg4 = static_cast<float>(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError("", "float", "SetRemap", 5, argv[3]));
  }
  arg5 = static_cast<float>(val5);
  (arg1)->SetRemap(arg2, arg3, arg4, arg5);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_Remap(void *self)
{
  FastNoise::Remap *arg1 = (FastNoise::Remap *)self;
  delete arg1;
}

static swig_class SwigClassConvertRGBA8;

SWIGINTERN VALUE
_wrap_ConvertRGBA8_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::ConvertRGBA8 *arg1 = (FastNoise::ConvertRGBA8 *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__ConvertRGBA8, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::ConvertRGBA8 const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::ConvertRGBA8 *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::ConvertRGBA8 const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_ConvertRGBA8_SetSource(int argc, VALUE *argv, VALUE self)
{
  FastNoise::ConvertRGBA8 *arg1 = (FastNoise::ConvertRGBA8 *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__ConvertRGBA8, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::ConvertRGBA8 *", "SetSource", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::ConvertRGBA8 *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetSource(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_ConvertRGBA8_SetMinMax(int argc, VALUE *argv, VALUE self)
{
  FastNoise::ConvertRGBA8 *arg1 = (FastNoise::ConvertRGBA8 *)0;
  float arg2;
  float arg3;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;
  float val3;
  int ecode3 = 0;

  if ((argc < 2) || (argc > 2))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__ConvertRGBA8, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::ConvertRGBA8 *", "SetMinMax", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::ConvertRGBA8 *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetMinMax", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError("", "float", "SetMinMax", 3, argv[1]));
  }
  arg3 = static_cast<float>(val3);
  (arg1)->SetMinMax(arg2, arg3);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_ConvertRGBA8(void *self)
{
  FastNoise::ConvertRGBA8 *arg1 = (FastNoise::ConvertRGBA8 *)self;
  delete arg1;
}

static swig_class SwigClassTerrace;

SWIGINTERN VALUE
_wrap_Terrace_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Terrace *arg1 = (FastNoise::Terrace *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Terrace, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Terrace const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Terrace *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Terrace const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Terrace_SetSource(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Terrace *arg1 = (FastNoise::Terrace *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Terrace, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Terrace *", "SetSource", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Terrace *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetSource(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Terrace_SetMultiplier(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Terrace *arg1 = (FastNoise::Terrace *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Terrace, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Terrace *", "SetMultiplier", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Terrace *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetMultiplier", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetMultiplier(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_Terrace_SetSmoothness(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Terrace *arg1 = (FastNoise::Terrace *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Terrace, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Terrace *", "SetSmoothness", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Terrace *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetSmoothness", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetSmoothness(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_Terrace(void *self)
{
  FastNoise::Terrace *arg1 = (FastNoise::Terrace *)self;
  delete arg1;
}

static swig_class SwigClassDomainAxisScale;

SWIGINTERN VALUE
_wrap_DomainAxisScale_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainAxisScale *arg1 = (FastNoise::DomainAxisScale *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainAxisScale, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainAxisScale const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainAxisScale *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::DomainAxisScale const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_DomainAxisScale_SetSource(int argc, VALUE *argv, VALUE self)
{
  FastNoise::DomainAxisScale *arg1 = (FastNoise::DomainAxisScale *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__DomainAxisScale, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::DomainAxisScale *", "SetSource", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::DomainAxisScale *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetSource(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_DomainAxisScale(void *self)
{
  FastNoise::DomainAxisScale *arg1 = (FastNoise::DomainAxisScale *)self;
  delete arg1;
}

static swig_class SwigClassAddDimension;

SWIGINTERN VALUE
_wrap_AddDimension_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::AddDimension *arg1 = (FastNoise::AddDimension *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__AddDimension, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::AddDimension const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::AddDimension *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::AddDimension const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_AddDimension_SetSource(int argc, VALUE *argv, VALUE self)
{
  FastNoise::AddDimension *arg1 = (FastNoise::AddDimension *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__AddDimension, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::AddDimension *", "SetSource", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::AddDimension *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetSource(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_AddDimension_SetNewDimensionPosition__SWIG_0(int argc, VALUE *argv, VALUE self)
{
  FastNoise::AddDimension *arg1 = (FastNoise::AddDimension *)0;
  float arg2;
  void *argp1 = 0;
  int res1 = 0;
  float val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__AddDimension, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::AddDimension *", "SetNewDimensionPosition", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::AddDimension *>(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "float", "SetNewDimensionPosition", 2, argv[0]));
  }
  arg2 = static_cast<float>(val2);
  (arg1)->SetNewDimensionPosition(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_AddDimension_SetNewDimensionPosition__SWIG_1(int argc, VALUE *argv, VALUE self)
{
  FastNoise::AddDimension *arg1 = (FastNoise::AddDimension *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__AddDimension, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::AddDimension *", "SetNewDimensionPosition", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::AddDimension *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetNewDimensionPosition", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetNewDimensionPosition", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetNewDimensionPosition(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE _wrap_AddDimension_SetNewDimensionPosition(int nargs, VALUE *args, VALUE self)
{
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3)
    SWIG_fail;
  for (ii = 1; (ii < argc); ++ii)
  {
    argv[ii] = args[ii - 1];
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__AddDimension, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_SmartNodeArgT_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v)
      {
        return _wrap_AddDimension_SetNewDimensionPosition__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2)
  {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FastNoise__AddDimension, 0);
    _v = SWIG_CheckState(res);
    if (_v)
    {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v)
      {
        return _wrap_AddDimension_SetNewDimensionPosition__SWIG_0(nargs, args, self);
      }
    }
  }

fail:
  Ruby_Format_OverloadedError(argc, 3, "AddDimension.SetNewDimensionPosition",
                              "    void AddDimension.SetNewDimensionPosition(float value)\n"
                              "    void AddDimension.SetNewDimensionPosition(FastNoise::SmartNodeArg< > gen)\n");

  return Qnil;
}

SWIGINTERN void
free_FastNoise_AddDimension(void *self)
{
  FastNoise::AddDimension *arg1 = (FastNoise::AddDimension *)self;
  delete arg1;
}

static swig_class SwigClassRemoveDimension;

SWIGINTERN VALUE
_wrap_RemoveDimension_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::RemoveDimension *arg1 = (FastNoise::RemoveDimension *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__RemoveDimension, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::RemoveDimension const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::RemoveDimension *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::RemoveDimension const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_RemoveDimension_SetSource(int argc, VALUE *argv, VALUE self)
{
  FastNoise::RemoveDimension *arg1 = (FastNoise::RemoveDimension *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__RemoveDimension, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::RemoveDimension *", "SetSource", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::RemoveDimension *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetSource(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_RemoveDimension_SetRemoveDimension(int argc, VALUE *argv, VALUE self)
{
  FastNoise::RemoveDimension *arg1 = (FastNoise::RemoveDimension *)0;
  FastNoise::Dim arg2;
  void *argp1 = 0;
  int res1 = 0;
  int val2;
  int ecode2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__RemoveDimension, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::RemoveDimension *", "SetRemoveDimension", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::RemoveDimension *>(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2))
  {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError("", "FastNoise::Dim", "SetRemoveDimension", 2, argv[0]));
  }
  arg2 = static_cast<FastNoise::Dim>(val2);
  (arg1)->SetRemoveDimension(arg2);
  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_RemoveDimension(void *self)
{
  FastNoise::RemoveDimension *arg1 = (FastNoise::RemoveDimension *)self;
  delete arg1;
}

static swig_class SwigClassGeneratorCache;

SWIGINTERN VALUE
_wrap_GeneratorCache_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::GeneratorCache *arg1 = (FastNoise::GeneratorCache *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__GeneratorCache, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::GeneratorCache const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::GeneratorCache *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::GeneratorCache const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN VALUE
_wrap_GeneratorCache_SetSource(int argc, VALUE *argv, VALUE self)
{
  FastNoise::GeneratorCache *arg1 = (FastNoise::GeneratorCache *)0;
  ;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  if ((argc < 1) || (argc > 1))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__GeneratorCache, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::GeneratorCache *", "SetSource", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::GeneratorCache *>(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_SmartNodeArgT_t, 0);
    if (!SWIG_IsOK(res2))
    {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError("", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    if (!argp2)
    {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "FastNoise::SmartNodeArg< >", "SetSource", 2, argv[0]));
    }
    else
    {
      FastNoise::SmartNodeArg<> arg2 = (reinterpret_cast<FastNoise::SmartNodeArg<>>(argp2));
      (arg1)->SetSource(arg2);
    }
  }

  return Qnil;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_GeneratorCache(void *self)
{
  FastNoise::GeneratorCache *arg1 = (FastNoise::GeneratorCache *)self;
  delete arg1;
}

static swig_class SwigClassPerlin;

SWIGINTERN VALUE
_wrap_Perlin_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Perlin *arg1 = (FastNoise::Perlin *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Perlin, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Perlin const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Perlin *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Perlin const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_Perlin(void *self)
{
  FastNoise::Perlin *arg1 = (FastNoise::Perlin *)self;
  delete arg1;
}

static swig_class SwigClassSimplex;

SWIGINTERN VALUE
_wrap_Simplex_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Simplex *arg1 = (FastNoise::Simplex *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Simplex, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Simplex const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Simplex *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Simplex const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_Simplex(void *self)
{
  FastNoise::Simplex *arg1 = (FastNoise::Simplex *)self;
  delete arg1;
}

static swig_class SwigClassOpenSimplex2;

SWIGINTERN VALUE
_wrap_OpenSimplex2_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::OpenSimplex2 *arg1 = (FastNoise::OpenSimplex2 *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__OpenSimplex2, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::OpenSimplex2 const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::OpenSimplex2 *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::OpenSimplex2 const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_OpenSimplex2(void *self)
{
  FastNoise::OpenSimplex2 *arg1 = (FastNoise::OpenSimplex2 *)self;
  delete arg1;
}

static swig_class SwigClassValue;

SWIGINTERN VALUE
_wrap_Value_GetMetadata(int argc, VALUE *argv, VALUE self)
{
  FastNoise::Value *arg1 = (FastNoise::Value *)0;
  void *argp1 = 0;
  int res1 = 0;
  FastNoise::Metadata *result = 0;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0))
  {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)", argc);
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1, SWIGTYPE_p_FastNoise__Value, 0 | 0);
  if (!SWIG_IsOK(res1))
  {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError("", "FastNoise::Value const *", "GetMetadata", 1, self));
  }
  arg1 = reinterpret_cast<FastNoise::Value *>(argp1);
  result = (FastNoise::Metadata *)&((FastNoise::Value const *)arg1)->GetMetadata();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FastNoise__Metadata, 0 | 0);
  return vresult;
fail:
  return Qnil;
}

SWIGINTERN void
free_FastNoise_Value(void *self)
{
  FastNoise::Value *arg1 = (FastNoise::Value *)self;
  delete arg1;
}

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_FastNoise__ConvertRGBA8To_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::ConvertRGBA8 *)x));
}
static void *_p_FastNoise__RemoveDimensionTo_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::RemoveDimension *)x));
}
static void *_p_FastNoise__AddDimensionTo_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::AddDimension *)x));
}
static void *_p_FastNoise__TerraceTo_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::Terrace *)x));
}
static void *_p_FastNoise__DomainRotateTo_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::DomainRotate *)x));
}
static void *_p_FastNoise__DomainScaleTo_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::DomainScale *)x));
}
static void *_p_FastNoise__RemapTo_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::Remap *)x));
}
static void *_p_FastNoise__SimplexTo_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::Simplex *)x));
}
static void *_p_FastNoise__GeneratorCacheTo_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::GeneratorCache *)x));
}
static void *_p_FastNoise__OpenSimplex2To_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::OpenSimplex2 *)x));
}
static void *_p_FastNoise__ValueTo_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::Value *)x));
}
static void *_p_FastNoise__SeedOffsetTo_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::SeedOffset *)x));
}
static void *_p_FastNoise__DomainOffsetTo_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::DomainOffset *)x));
}
static void *_p_FastNoise__DomainAxisScaleTo_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::DomainAxisScale *)x));
}
static void *_p_FastNoise__PerlinTo_p_FastNoise__Generator(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Generator *)((FastNoise::Perlin *)x));
}
static void *_p_FastNoise__SubtractTo_p_FastNoise__OperatorHybridLHS(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::OperatorHybridLHS *)((FastNoise::Subtract *)x));
}
static void *_p_FastNoise__DivideTo_p_FastNoise__OperatorHybridLHS(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::OperatorHybridLHS *)((FastNoise::Divide *)x));
}
static void *_p_FastNoise__MaxTo_p_FastNoise__OperatorSourceLHS(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::OperatorSourceLHS *)((FastNoise::Max *)x));
}
static void *_p_FastNoise__MinSmoothTo_p_FastNoise__OperatorSourceLHS(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::OperatorSourceLHS *)((FastNoise::MinSmooth *)x));
}
static void *_p_FastNoise__MaxSmoothTo_p_FastNoise__OperatorSourceLHS(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::OperatorSourceLHS *)((FastNoise::MaxSmooth *)x));
}
static void *_p_FastNoise__MinTo_p_FastNoise__OperatorSourceLHS(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::OperatorSourceLHS *)((FastNoise::Min *)x));
}
static void *_p_FastNoise__MultiplyTo_p_FastNoise__OperatorSourceLHS(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::OperatorSourceLHS *)((FastNoise::Multiply *)x));
}
static void *_p_FastNoise__AddTo_p_FastNoise__OperatorSourceLHS(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::OperatorSourceLHS *)((FastNoise::Add *)x));
}
static void *_p_FastNoise__CellularDistanceTo_p_FastNoise__Cellular(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Cellular *)((FastNoise::CellularDistance *)x));
}
static void *_p_FastNoise__CellularLookupTo_p_FastNoise__Cellular(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Cellular *)((FastNoise::CellularLookup *)x));
}
static void *_p_FastNoise__CellularValueTo_p_FastNoise__Cellular(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::Cellular *)((FastNoise::CellularValue *)x));
}
static void *_p_FastNoise__DomainWarpGradientTo_p_FastNoise__DomainWarp(void *x, int *SWIGUNUSEDPARM(newmemory))
{
  return (void *)((FastNoise::DomainWarp *)((FastNoise::DomainWarpGradient *)x));
}
static swig_type_info _swigt__p_DistanceFunction = {"_p_DistanceFunction", "DistanceFunction *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Add = {"_p_FastNoise__Add", "FastNoise::Add *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__AddDimension = {"_p_FastNoise__AddDimension", "FastNoise::AddDimension *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Cellular = {"_p_FastNoise__Cellular", "FastNoise::Cellular *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__CellularDistance = {"_p_FastNoise__CellularDistance", "FastNoise::CellularDistance *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__CellularLookup = {"_p_FastNoise__CellularLookup", "FastNoise::CellularLookup *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__CellularValue = {"_p_FastNoise__CellularValue", "FastNoise::CellularValue *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Checkerboard = {"_p_FastNoise__Checkerboard", "FastNoise::Checkerboard *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Constant = {"_p_FastNoise__Constant", "FastNoise::Constant *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__ConvertRGBA8 = {"_p_FastNoise__ConvertRGBA8", "FastNoise::ConvertRGBA8 *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__DistanceToPoint = {"_p_FastNoise__DistanceToPoint", "FastNoise::DistanceToPoint *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Divide = {"_p_FastNoise__Divide", "FastNoise::Divide *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__DomainAxisScale = {"_p_FastNoise__DomainAxisScale", "FastNoise::DomainAxisScale *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__DomainOffset = {"_p_FastNoise__DomainOffset", "FastNoise::DomainOffset *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__DomainRotate = {"_p_FastNoise__DomainRotate", "FastNoise::DomainRotate *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__DomainScale = {"_p_FastNoise__DomainScale", "FastNoise::DomainScale *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__DomainWarp = {"_p_FastNoise__DomainWarp", "FastNoise::DomainWarp *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__DomainWarpFractalIndependant = {"_p_FastNoise__DomainWarpFractalIndependant", "FastNoise::DomainWarpFractalIndependant *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__DomainWarpFractalProgressive = {"_p_FastNoise__DomainWarpFractalProgressive", "FastNoise::DomainWarpFractalProgressive *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__DomainWarpGradient = {"_p_FastNoise__DomainWarpGradient", "FastNoise::DomainWarpGradient *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Fade = {"_p_FastNoise__Fade", "FastNoise::Fade *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__FractalFBm = {"_p_FastNoise__FractalFBm", "FastNoise::FractalFBm *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__FractalPingPong = {"_p_FastNoise__FractalPingPong", "FastNoise::FractalPingPong *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__FractalRidged = {"_p_FastNoise__FractalRidged", "FastNoise::FractalRidged *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Generator = {"_p_FastNoise__Generator", "FastNoise::Generator *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__GeneratorCache = {"_p_FastNoise__GeneratorCache", "FastNoise::GeneratorCache *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__GeneratorSourceTT_FastNoise__Generator_t = {"_p_FastNoise__GeneratorSourceTT_FastNoise__Generator_t", "FastNoise::GeneratorSource *|FastNoise::GeneratorSourceT< FastNoise::Generator > *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__HybridSourceTT_FastNoise__Generator_t = {"_p_FastNoise__HybridSourceTT_FastNoise__Generator_t", "FastNoise::HybridSourceT< FastNoise::Generator > *|FastNoise::HybridSource *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Max = {"_p_FastNoise__Max", "FastNoise::Max *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__MaxSmooth = {"_p_FastNoise__MaxSmooth", "FastNoise::MaxSmooth *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Metadata = {"_p_FastNoise__Metadata", "FastNoise::Metadata *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Metadata__Member = {"_p_FastNoise__Metadata__Member", "FastNoise::Metadata::Member *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Min = {"_p_FastNoise__Min", "FastNoise::Min *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__MinSmooth = {"_p_FastNoise__MinSmooth", "FastNoise::MinSmooth *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Multiply = {"_p_FastNoise__Multiply", "FastNoise::Multiply *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__NodeData = {"_p_FastNoise__NodeData", "FastNoise::NodeData *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__OpenSimplex2 = {"_p_FastNoise__OpenSimplex2", "FastNoise::OpenSimplex2 *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__OperatorHybridLHS = {"_p_FastNoise__OperatorHybridLHS", "FastNoise::OperatorHybridLHS *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__OperatorSourceLHS = {"_p_FastNoise__OperatorSourceLHS", "FastNoise::OperatorSourceLHS *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__OutputMinMax = {"_p_FastNoise__OutputMinMax", "FastNoise::OutputMinMax *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Perlin = {"_p_FastNoise__Perlin", "FastNoise::Perlin *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__PositionOutput = {"_p_FastNoise__PositionOutput", "FastNoise::PositionOutput *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__PowFloat = {"_p_FastNoise__PowFloat", "FastNoise::PowFloat *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__PowInt = {"_p_FastNoise__PowInt", "FastNoise::PowInt *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Remap = {"_p_FastNoise__Remap", "FastNoise::Remap *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__RemoveDimension = {"_p_FastNoise__RemoveDimension", "FastNoise::RemoveDimension *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__SeedOffset = {"_p_FastNoise__SeedOffset", "FastNoise::SeedOffset *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Simplex = {"_p_FastNoise__Simplex", "FastNoise::Simplex *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__SineWave = {"_p_FastNoise__SineWave", "FastNoise::SineWave *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__SmartNodeManager = {"_p_FastNoise__SmartNodeManager", "FastNoise::SmartNodeManager *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Subtract = {"_p_FastNoise__Subtract", "FastNoise::Subtract *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Terrace = {"_p_FastNoise__Terrace", "FastNoise::Terrace *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__Value = {"_p_FastNoise__Value", "FastNoise::Value *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastNoise__White = {"_p_FastNoise__White", "FastNoise::White *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_FastSIMD__eLevel = {"_p_FastSIMD__eLevel", "FastSIMD::eLevel *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_SmartNodeArgT_t = {"_p_SmartNodeArgT_t", "FastNoise::SmartNodeArg< > *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_SmartNodeT_t = {"_p_SmartNodeT_t", "FastNoise::SmartNode< > *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_std__vectorT_FastNoise__Metadata__MemberHybrid_t = {"_p_std__vectorT_FastNoise__Metadata__MemberHybrid_t", "std::vector< FastNoise::Metadata::MemberHybrid > *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_std__vectorT_FastNoise__Metadata__MemberNodeLookup_t = {"_p_std__vectorT_FastNoise__Metadata__MemberNodeLookup_t", "std::vector< FastNoise::Metadata::MemberNodeLookup > *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_std__vectorT_FastNoise__Metadata__MemberVariable__ValueUnion_t = {"_p_std__vectorT_FastNoise__Metadata__MemberVariable__ValueUnion_t", "std::vector< FastNoise::Metadata::MemberVariable::ValueUnion > *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_std__vectorT_FastNoise__Metadata__MemberVariable_t = {"_p_std__vectorT_FastNoise__Metadata__MemberVariable_t", "std::vector< FastNoise::Metadata::MemberVariable > *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_std__vectorT_FastNoise__Metadata_const_p_t = {"_p_std__vectorT_FastNoise__Metadata_const_p_t", "std::vector< FastNoise::Metadata const * > *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_std__vectorT_FastNoise__NodeData_p_t = {"_p_std__vectorT_FastNoise__NodeData_p_t", "std::vector< FastNoise::NodeData * > *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_std__vectorT_char_const_p_t = {"_p_std__vectorT_char_const_p_t", "std::vector< char const * > *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_FastNoise__NodeData_p_float_t_t = {"_p_std__vectorT_std__pairT_FastNoise__NodeData_p_float_t_t", "std::vector< std::pair< FastNoise::NodeData *,float > > *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__unique_ptrT_FastNoise__NodeData_t_t = {"_p_std__vectorT_std__unique_ptrT_FastNoise__NodeData_t_t", "std::vector< std::unique_ptr< FastNoise::NodeData > > *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_uint16_t = {"_p_uint16_t", "uint16_t *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *", 0, 0, (void *)0, 0};

static swig_type_info *swig_type_initial[] = {
    &_swigt__p_DistanceFunction,
    &_swigt__p_FastNoise__Add,
    &_swigt__p_FastNoise__AddDimension,
    &_swigt__p_FastNoise__Cellular,
    &_swigt__p_FastNoise__CellularDistance,
    &_swigt__p_FastNoise__CellularLookup,
    &_swigt__p_FastNoise__CellularValue,
    &_swigt__p_FastNoise__Checkerboard,
    &_swigt__p_FastNoise__Constant,
    &_swigt__p_FastNoise__ConvertRGBA8,
    &_swigt__p_FastNoise__DistanceToPoint,
    &_swigt__p_FastNoise__Divide,
    &_swigt__p_FastNoise__DomainAxisScale,
    &_swigt__p_FastNoise__DomainOffset,
    &_swigt__p_FastNoise__DomainRotate,
    &_swigt__p_FastNoise__DomainScale,
    &_swigt__p_FastNoise__DomainWarp,
    &_swigt__p_FastNoise__DomainWarpFractalIndependant,
    &_swigt__p_FastNoise__DomainWarpFractalProgressive,
    &_swigt__p_FastNoise__DomainWarpGradient,
    &_swigt__p_FastNoise__Fade,
    &_swigt__p_FastNoise__FractalFBm,
    &_swigt__p_FastNoise__FractalPingPong,
    &_swigt__p_FastNoise__FractalRidged,
    &_swigt__p_FastNoise__Generator,
    &_swigt__p_FastNoise__GeneratorCache,
    &_swigt__p_FastNoise__GeneratorSourceTT_FastNoise__Generator_t,
    &_swigt__p_FastNoise__HybridSourceTT_FastNoise__Generator_t,
    &_swigt__p_FastNoise__Max,
    &_swigt__p_FastNoise__MaxSmooth,
    &_swigt__p_FastNoise__Metadata,
    &_swigt__p_FastNoise__Metadata__Member,
    &_swigt__p_FastNoise__Min,
    &_swigt__p_FastNoise__MinSmooth,
    &_swigt__p_FastNoise__Multiply,
    &_swigt__p_FastNoise__NodeData,
    &_swigt__p_FastNoise__OpenSimplex2,
    &_swigt__p_FastNoise__OperatorHybridLHS,
    &_swigt__p_FastNoise__OperatorSourceLHS,
    &_swigt__p_FastNoise__OutputMinMax,
    &_swigt__p_FastNoise__Perlin,
    &_swigt__p_FastNoise__PositionOutput,
    &_swigt__p_FastNoise__PowFloat,
    &_swigt__p_FastNoise__PowInt,
    &_swigt__p_FastNoise__Remap,
    &_swigt__p_FastNoise__RemoveDimension,
    &_swigt__p_FastNoise__SeedOffset,
    &_swigt__p_FastNoise__Simplex,
    &_swigt__p_FastNoise__SineWave,
    &_swigt__p_FastNoise__SmartNodeManager,
    &_swigt__p_FastNoise__Subtract,
    &_swigt__p_FastNoise__Terrace,
    &_swigt__p_FastNoise__Value,
    &_swigt__p_FastNoise__White,
    &_swigt__p_FastSIMD__eLevel,
    &_swigt__p_SmartNodeArgT_t,
    &_swigt__p_SmartNodeT_t,
    &_swigt__p_char,
    &_swigt__p_float,
    &_swigt__p_p_char,
    &_swigt__p_std__string,
    &_swigt__p_std__vectorT_FastNoise__Metadata__MemberHybrid_t,
    &_swigt__p_std__vectorT_FastNoise__Metadata__MemberNodeLookup_t,
    &_swigt__p_std__vectorT_FastNoise__Metadata__MemberVariable__ValueUnion_t,
    &_swigt__p_std__vectorT_FastNoise__Metadata__MemberVariable_t,
    &_swigt__p_std__vectorT_FastNoise__Metadata_const_p_t,
    &_swigt__p_std__vectorT_FastNoise__NodeData_p_t,
    &_swigt__p_std__vectorT_char_const_p_t,
    &_swigt__p_std__vectorT_std__pairT_FastNoise__NodeData_p_float_t_t,
    &_swigt__p_std__vectorT_std__unique_ptrT_FastNoise__NodeData_t_t,
    &_swigt__p_uint16_t,
    &_swigt__p_uint32_t,
    &_swigt__p_uint64_t,
};

static swig_cast_info _swigc__p_DistanceFunction[] = {{&_swigt__p_DistanceFunction, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Add[] = {{&_swigt__p_FastNoise__Add, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__AddDimension[] = {{&_swigt__p_FastNoise__AddDimension, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Cellular[] = {{&_swigt__p_FastNoise__CellularDistance, _p_FastNoise__CellularDistanceTo_p_FastNoise__Cellular, 0, 0}, {&_swigt__p_FastNoise__CellularLookup, _p_FastNoise__CellularLookupTo_p_FastNoise__Cellular, 0, 0}, {&_swigt__p_FastNoise__CellularValue, _p_FastNoise__CellularValueTo_p_FastNoise__Cellular, 0, 0}, {&_swigt__p_FastNoise__Cellular, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__CellularDistance[] = {{&_swigt__p_FastNoise__CellularDistance, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__CellularLookup[] = {{&_swigt__p_FastNoise__CellularLookup, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__CellularValue[] = {{&_swigt__p_FastNoise__CellularValue, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Checkerboard[] = {{&_swigt__p_FastNoise__Checkerboard, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Constant[] = {{&_swigt__p_FastNoise__Constant, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__ConvertRGBA8[] = {{&_swigt__p_FastNoise__ConvertRGBA8, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__DistanceToPoint[] = {{&_swigt__p_FastNoise__DistanceToPoint, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Divide[] = {{&_swigt__p_FastNoise__Divide, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__DomainAxisScale[] = {{&_swigt__p_FastNoise__DomainAxisScale, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__DomainOffset[] = {{&_swigt__p_FastNoise__DomainOffset, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__DomainRotate[] = {{&_swigt__p_FastNoise__DomainRotate, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__DomainScale[] = {{&_swigt__p_FastNoise__DomainScale, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__DomainWarp[] = {{&_swigt__p_FastNoise__DomainWarp, 0, 0, 0}, {&_swigt__p_FastNoise__DomainWarpGradient, _p_FastNoise__DomainWarpGradientTo_p_FastNoise__DomainWarp, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__DomainWarpFractalIndependant[] = {{&_swigt__p_FastNoise__DomainWarpFractalIndependant, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__DomainWarpFractalProgressive[] = {{&_swigt__p_FastNoise__DomainWarpFractalProgressive, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__DomainWarpGradient[] = {{&_swigt__p_FastNoise__DomainWarpGradient, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Fade[] = {{&_swigt__p_FastNoise__Fade, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__FractalFBm[] = {{&_swigt__p_FastNoise__FractalFBm, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__FractalPingPong[] = {{&_swigt__p_FastNoise__FractalPingPong, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__FractalRidged[] = {{&_swigt__p_FastNoise__FractalRidged, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Generator[] = {{&_swigt__p_FastNoise__ConvertRGBA8, _p_FastNoise__ConvertRGBA8To_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__RemoveDimension, _p_FastNoise__RemoveDimensionTo_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__AddDimension, _p_FastNoise__AddDimensionTo_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__Terrace, _p_FastNoise__TerraceTo_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__DomainRotate, _p_FastNoise__DomainRotateTo_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__DomainScale, _p_FastNoise__DomainScaleTo_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__Remap, _p_FastNoise__RemapTo_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__Simplex, _p_FastNoise__SimplexTo_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__GeneratorCache, _p_FastNoise__GeneratorCacheTo_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__Perlin, _p_FastNoise__PerlinTo_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__OpenSimplex2, _p_FastNoise__OpenSimplex2To_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__Value, _p_FastNoise__ValueTo_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__DomainOffset, _p_FastNoise__DomainOffsetTo_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__SeedOffset, _p_FastNoise__SeedOffsetTo_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__DomainAxisScale, _p_FastNoise__DomainAxisScaleTo_p_FastNoise__Generator, 0, 0}, {&_swigt__p_FastNoise__Generator, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__GeneratorCache[] = {{&_swigt__p_FastNoise__GeneratorCache, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__GeneratorSourceTT_FastNoise__Generator_t[] = {{&_swigt__p_FastNoise__GeneratorSourceTT_FastNoise__Generator_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__HybridSourceTT_FastNoise__Generator_t[] = {{&_swigt__p_FastNoise__HybridSourceTT_FastNoise__Generator_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Max[] = {{&_swigt__p_FastNoise__Max, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__MaxSmooth[] = {{&_swigt__p_FastNoise__MaxSmooth, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Metadata[] = {{&_swigt__p_FastNoise__Metadata, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Metadata__Member[] = {{&_swigt__p_FastNoise__Metadata__Member, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Min[] = {{&_swigt__p_FastNoise__Min, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__MinSmooth[] = {{&_swigt__p_FastNoise__MinSmooth, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Multiply[] = {{&_swigt__p_FastNoise__Multiply, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__NodeData[] = {{&_swigt__p_FastNoise__NodeData, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__OpenSimplex2[] = {{&_swigt__p_FastNoise__OpenSimplex2, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__OperatorHybridLHS[] = {{&_swigt__p_FastNoise__Subtract, _p_FastNoise__SubtractTo_p_FastNoise__OperatorHybridLHS, 0, 0}, {&_swigt__p_FastNoise__OperatorHybridLHS, 0, 0, 0}, {&_swigt__p_FastNoise__Divide, _p_FastNoise__DivideTo_p_FastNoise__OperatorHybridLHS, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__OperatorSourceLHS[] = {{&_swigt__p_FastNoise__Min, _p_FastNoise__MinTo_p_FastNoise__OperatorSourceLHS, 0, 0}, {&_swigt__p_FastNoise__Add, _p_FastNoise__AddTo_p_FastNoise__OperatorSourceLHS, 0, 0}, {&_swigt__p_FastNoise__MinSmooth, _p_FastNoise__MinSmoothTo_p_FastNoise__OperatorSourceLHS, 0, 0}, {&_swigt__p_FastNoise__MaxSmooth, _p_FastNoise__MaxSmoothTo_p_FastNoise__OperatorSourceLHS, 0, 0}, {&_swigt__p_FastNoise__Multiply, _p_FastNoise__MultiplyTo_p_FastNoise__OperatorSourceLHS, 0, 0}, {&_swigt__p_FastNoise__OperatorSourceLHS, 0, 0, 0}, {&_swigt__p_FastNoise__Max, _p_FastNoise__MaxTo_p_FastNoise__OperatorSourceLHS, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__OutputMinMax[] = {{&_swigt__p_FastNoise__OutputMinMax, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Perlin[] = {{&_swigt__p_FastNoise__Perlin, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__PositionOutput[] = {{&_swigt__p_FastNoise__PositionOutput, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__PowFloat[] = {{&_swigt__p_FastNoise__PowFloat, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__PowInt[] = {{&_swigt__p_FastNoise__PowInt, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Remap[] = {{&_swigt__p_FastNoise__Remap, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__RemoveDimension[] = {{&_swigt__p_FastNoise__RemoveDimension, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__SeedOffset[] = {{&_swigt__p_FastNoise__SeedOffset, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Simplex[] = {{&_swigt__p_FastNoise__Simplex, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__SineWave[] = {{&_swigt__p_FastNoise__SineWave, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__SmartNodeManager[] = {{&_swigt__p_FastNoise__SmartNodeManager, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Subtract[] = {{&_swigt__p_FastNoise__Subtract, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Terrace[] = {{&_swigt__p_FastNoise__Terrace, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__Value[] = {{&_swigt__p_FastNoise__Value, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastNoise__White[] = {{&_swigt__p_FastNoise__White, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_FastSIMD__eLevel[] = {{&_swigt__p_FastSIMD__eLevel, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmartNodeArgT_t[] = {{&_swigt__p_SmartNodeArgT_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmartNodeT_t[] = {{&_swigt__p_SmartNodeT_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {{&_swigt__p_char, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {{&_swigt__p_float, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {{&_swigt__p_p_char, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {{&_swigt__p_std__string, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_FastNoise__Metadata__MemberHybrid_t[] = {{&_swigt__p_std__vectorT_FastNoise__Metadata__MemberHybrid_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_FastNoise__Metadata__MemberNodeLookup_t[] = {{&_swigt__p_std__vectorT_FastNoise__Metadata__MemberNodeLookup_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_FastNoise__Metadata__MemberVariable__ValueUnion_t[] = {{&_swigt__p_std__vectorT_FastNoise__Metadata__MemberVariable__ValueUnion_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_FastNoise__Metadata__MemberVariable_t[] = {{&_swigt__p_std__vectorT_FastNoise__Metadata__MemberVariable_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_FastNoise__Metadata_const_p_t[] = {{&_swigt__p_std__vectorT_FastNoise__Metadata_const_p_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_FastNoise__NodeData_p_t[] = {{&_swigt__p_std__vectorT_FastNoise__NodeData_p_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_const_p_t[] = {{&_swigt__p_std__vectorT_char_const_p_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_FastNoise__NodeData_p_float_t_t[] = {{&_swigt__p_std__vectorT_std__pairT_FastNoise__NodeData_p_float_t_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__unique_ptrT_FastNoise__NodeData_t_t[] = {{&_swigt__p_std__vectorT_std__unique_ptrT_FastNoise__NodeData_t_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16_t[] = {{&_swigt__p_uint16_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {{&_swigt__p_uint32_t, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {{&_swigt__p_uint64_t, 0, 0, 0}, {0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
    _swigc__p_DistanceFunction,
    _swigc__p_FastNoise__Add,
    _swigc__p_FastNoise__AddDimension,
    _swigc__p_FastNoise__Cellular,
    _swigc__p_FastNoise__CellularDistance,
    _swigc__p_FastNoise__CellularLookup,
    _swigc__p_FastNoise__CellularValue,
    _swigc__p_FastNoise__Checkerboard,
    _swigc__p_FastNoise__Constant,
    _swigc__p_FastNoise__ConvertRGBA8,
    _swigc__p_FastNoise__DistanceToPoint,
    _swigc__p_FastNoise__Divide,
    _swigc__p_FastNoise__DomainAxisScale,
    _swigc__p_FastNoise__DomainOffset,
    _swigc__p_FastNoise__DomainRotate,
    _swigc__p_FastNoise__DomainScale,
    _swigc__p_FastNoise__DomainWarp,
    _swigc__p_FastNoise__DomainWarpFractalIndependant,
    _swigc__p_FastNoise__DomainWarpFractalProgressive,
    _swigc__p_FastNoise__DomainWarpGradient,
    _swigc__p_FastNoise__Fade,
    _swigc__p_FastNoise__FractalFBm,
    _swigc__p_FastNoise__FractalPingPong,
    _swigc__p_FastNoise__FractalRidged,
    _swigc__p_FastNoise__Generator,
    _swigc__p_FastNoise__GeneratorCache,
    _swigc__p_FastNoise__GeneratorSourceTT_FastNoise__Generator_t,
    _swigc__p_FastNoise__HybridSourceTT_FastNoise__Generator_t,
    _swigc__p_FastNoise__Max,
    _swigc__p_FastNoise__MaxSmooth,
    _swigc__p_FastNoise__Metadata,
    _swigc__p_FastNoise__Metadata__Member,
    _swigc__p_FastNoise__Min,
    _swigc__p_FastNoise__MinSmooth,
    _swigc__p_FastNoise__Multiply,
    _swigc__p_FastNoise__NodeData,
    _swigc__p_FastNoise__OpenSimplex2,
    _swigc__p_FastNoise__OperatorHybridLHS,
    _swigc__p_FastNoise__OperatorSourceLHS,
    _swigc__p_FastNoise__OutputMinMax,
    _swigc__p_FastNoise__Perlin,
    _swigc__p_FastNoise__PositionOutput,
    _swigc__p_FastNoise__PowFloat,
    _swigc__p_FastNoise__PowInt,
    _swigc__p_FastNoise__Remap,
    _swigc__p_FastNoise__RemoveDimension,
    _swigc__p_FastNoise__SeedOffset,
    _swigc__p_FastNoise__Simplex,
    _swigc__p_FastNoise__SineWave,
    _swigc__p_FastNoise__SmartNodeManager,
    _swigc__p_FastNoise__Subtract,
    _swigc__p_FastNoise__Terrace,
    _swigc__p_FastNoise__Value,
    _swigc__p_FastNoise__White,
    _swigc__p_FastSIMD__eLevel,
    _swigc__p_SmartNodeArgT_t,
    _swigc__p_SmartNodeT_t,
    _swigc__p_char,
    _swigc__p_float,
    _swigc__p_p_char,
    _swigc__p_std__string,
    _swigc__p_std__vectorT_FastNoise__Metadata__MemberHybrid_t,
    _swigc__p_std__vectorT_FastNoise__Metadata__MemberNodeLookup_t,
    _swigc__p_std__vectorT_FastNoise__Metadata__MemberVariable__ValueUnion_t,
    _swigc__p_std__vectorT_FastNoise__Metadata__MemberVariable_t,
    _swigc__p_std__vectorT_FastNoise__Metadata_const_p_t,
    _swigc__p_std__vectorT_FastNoise__NodeData_p_t,
    _swigc__p_std__vectorT_char_const_p_t,
    _swigc__p_std__vectorT_std__pairT_FastNoise__NodeData_p_float_t_t,
    _swigc__p_std__vectorT_std__unique_ptrT_FastNoise__NodeData_t_t,
    _swigc__p_uint16_t,
    _swigc__p_uint32_t,
    _swigc__p_uint64_t,
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C"
{
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

  SWIGRUNTIME void
  SWIG_InitializeModule(void *clientdata)
  {
    size_t i;
    swig_module_info *module_head, *iter;
    int init;

    /* check to see if the circular list has been setup, if not, set it up */
    if (swig_module.next == 0)
    {
      /* Initialize the swig_module */
      swig_module.type_initial = swig_type_initial;
      swig_module.cast_initial = swig_cast_initial;
      swig_module.next = &swig_module;
      init = 1;
    }
    else
    {
      init = 0;
    }

    /* Try and load any already created modules */
    module_head = SWIG_GetModule(clientdata);
    if (!module_head)
    {
      /* This is the first module loaded for this interpreter */
      /* so set the swig module into the interpreter */
      SWIG_SetModule(clientdata, &swig_module);
    }
    else
    {
      /* the interpreter has loaded a SWIG module, but has it loaded this one? */
      iter = module_head;
      do
      {
        if (iter == &swig_module)
        {
          /* Our module is already in the list, so there's nothing more to do. */
          return;
        }
        iter = iter->next;
      } while (iter != module_head);

      /* otherwise we must add our module into the list */
      swig_module.next = module_head->next;
      module_head->next = &swig_module;
    }

    /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
    if (init == 0)
      return;

      /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
    for (i = 0; i < swig_module.size; ++i)
    {
      swig_type_info *type = 0;
      swig_type_info *ret;
      swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

      /* if there is another module already loaded */
      if (swig_module.next != &swig_module)
      {
        type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
      }
      if (type)
      {
        /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
        if (swig_module.type_initial[i]->clientdata)
        {
          type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
        }
      }
      else
      {
        type = swig_module.type_initial[i];
      }

      /* Insert casting types */
      cast = swig_module.cast_initial[i];
      while (cast->type)
      {

        /* Don't need to add information already in the list */
        ret = 0;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
        if (swig_module.next != &swig_module)
        {
          ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
          if (ret)
            printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
        }
        if (ret)
        {
          if (type == swig_module.type_initial[i])
          {
#ifdef SWIGRUNTIME_DEBUG
            printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
            cast->type = ret;
            ret = 0;
          }
          else
          {
            /* Check for casting already in the list */
            swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
            if (ocast)
              printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
            if (!ocast)
              ret = 0;
          }
        }

        if (!ret)
        {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
          if (type->cast)
          {
            type->cast->prev = cast;
            cast->next = type->cast;
          }
          type->cast = cast;
        }
        cast++;
      }
      /* Set entry in modules->types array equal to the type */
      swig_module.types[i] = type;
    }
    swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
    printf("**** SWIG_InitializeModule: Cast List ******\n");
    for (i = 0; i < swig_module.size; ++i)
    {
      int j = 0;
      swig_cast_info *cast = swig_module.cast_initial[i];
      printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
      while (cast->type)
      {
        printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
        cast++;
        ++j;
      }
      printf("---- Total casts: %d\n", j);
    }
    printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
  }

  /* This function will propagate the clientdata field of type to
   * any new swig_type_info structures that have been added into the list
   * of equivalent types.  It is like calling
   * SWIG_TypeClientData(type, clientdata) a second time.
   */
  SWIGRUNTIME void
  SWIG_PropagateClientData(void)
  {
    size_t i;
    swig_cast_info *equiv;
    static int init_run = 0;

    if (init_run)
      return;
    init_run = 1;

    for (i = 0; i < swig_module.size; i++)
    {
      if (swig_module.types[i]->clientdata)
      {
        equiv = swig_module.types[i]->cast;
        while (equiv)
        {
          if (!equiv->converter)
          {
            if (equiv->type && !equiv->type->clientdata)
              SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
          }
          equiv = equiv->next;
        }
      }
    }
  }

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
    SWIGEXPORT void
    Init_fastnoise2(void)
{
  size_t i;

  SWIG_InitRuntime();
  mFastnoise2 = rb_define_module("Fastnoise2");

  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++)
  {
    SWIG_define_class(swig_module.types[i]);
  }

  SWIG_RubyInitializeTrackings();
  rb_define_module_function(mFastnoise2, "NewFromEncodedNodeTree", VALUEFUNC(_wrap_NewFromEncodedNodeTree), -1);

  SwigClassMetadata.klass = rb_define_class_under(mFastnoise2, "Metadata", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Metadata, (void *)&SwigClassMetadata);
  rb_undef_alloc_func(SwigClassMetadata.klass);
  rb_define_singleton_method(SwigClassMetadata.klass, "GetAll", VALUEFUNC(_wrap_Metadata_GetAll), -1);
  rb_define_singleton_method(SwigClassMetadata.klass, "GetFromId", VALUEFUNC(_wrap_Metadata_GetFromId), -1);
  rb_define_singleton_method(SwigClassMetadata.klass, "SerialiseNodeData", VALUEFUNC(_wrap_Metadata_SerialiseNodeData), -1);
  rb_define_singleton_method(SwigClassMetadata.klass, "DeserialiseNodeData", VALUEFUNC(_wrap_Metadata_DeserialiseNodeData), -1);
  rb_define_singleton_method(SwigClassMetadata.klass, "FormatMetadataNodeName", VALUEFUNC(_wrap_Metadata_FormatMetadataNodeName), -1);
  rb_define_singleton_method(SwigClassMetadata.klass, "FormatMetadataMemberName", VALUEFUNC(_wrap_Metadata_FormatMetadataMemberName), -1);
  rb_define_method(SwigClassMetadata.klass, "id=", VALUEFUNC(_wrap_Metadata_id_set), -1);
  rb_define_method(SwigClassMetadata.klass, "id", VALUEFUNC(_wrap_Metadata_id_get), -1);
  rb_define_method(SwigClassMetadata.klass, "name=", VALUEFUNC(_wrap_Metadata_name_set), -1);
  rb_define_method(SwigClassMetadata.klass, "name", VALUEFUNC(_wrap_Metadata_name_get), -1);
  rb_define_method(SwigClassMetadata.klass, "groups=", VALUEFUNC(_wrap_Metadata_groups_set), -1);
  rb_define_method(SwigClassMetadata.klass, "groups", VALUEFUNC(_wrap_Metadata_groups_get), -1);
  rb_define_method(SwigClassMetadata.klass, "memberVariables=", VALUEFUNC(_wrap_Metadata_memberVariables_set), -1);
  rb_define_method(SwigClassMetadata.klass, "memberVariables", VALUEFUNC(_wrap_Metadata_memberVariables_get), -1);
  rb_define_method(SwigClassMetadata.klass, "memberNodeLookups=", VALUEFUNC(_wrap_Metadata_memberNodeLookups_set), -1);
  rb_define_method(SwigClassMetadata.klass, "memberNodeLookups", VALUEFUNC(_wrap_Metadata_memberNodeLookups_get), -1);
  rb_define_method(SwigClassMetadata.klass, "memberHybrids=", VALUEFUNC(_wrap_Metadata_memberHybrids_set), -1);
  rb_define_method(SwigClassMetadata.klass, "memberHybrids", VALUEFUNC(_wrap_Metadata_memberHybrids_get), -1);
  rb_define_method(SwigClassMetadata.klass, "CreateNode", VALUEFUNC(_wrap_Metadata_CreateNode), -1);
  SwigClassMetadata.mark = 0;
  SwigClassMetadata.destroy = (void (*)(void *))free_FastNoise_Metadata;
  SwigClassMetadata.trackObjects = 0;

  SwigClassNodeData.klass = rb_define_class_under(mFastnoise2, "NodeData", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__NodeData, (void *)&SwigClassNodeData);
  rb_define_alloc_func(SwigClassNodeData.klass, _wrap_NodeData_allocate);
  rb_define_method(SwigClassNodeData.klass, "initialize", VALUEFUNC(_wrap_new_NodeData), -1);
  rb_define_method(SwigClassNodeData.klass, "metadata=", VALUEFUNC(_wrap_NodeData_metadata_set), -1);
  rb_define_method(SwigClassNodeData.klass, "metadata", VALUEFUNC(_wrap_NodeData_metadata_get), -1);
  rb_define_method(SwigClassNodeData.klass, "variables=", VALUEFUNC(_wrap_NodeData_variables_set), -1);
  rb_define_method(SwigClassNodeData.klass, "variables", VALUEFUNC(_wrap_NodeData_variables_get), -1);
  rb_define_method(SwigClassNodeData.klass, "nodeLookups=", VALUEFUNC(_wrap_NodeData_nodeLookups_set), -1);
  rb_define_method(SwigClassNodeData.klass, "nodeLookups", VALUEFUNC(_wrap_NodeData_nodeLookups_get), -1);
  rb_define_method(SwigClassNodeData.klass, "hybrids=", VALUEFUNC(_wrap_NodeData_hybrids_set), -1);
  rb_define_method(SwigClassNodeData.klass, "hybrids", VALUEFUNC(_wrap_NodeData_hybrids_get), -1);
  rb_define_method(SwigClassNodeData.klass, "==", VALUEFUNC(_wrap_NodeData___eq__), -1);
  SwigClassNodeData.mark = 0;
  SwigClassNodeData.destroy = (void (*)(void *))free_FastNoise_NodeData;
  SwigClassNodeData.trackObjects = 0;

  SwigClassSmartNodeManager.klass = rb_define_class_under(mFastnoise2, "SmartNodeManager", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__SmartNodeManager, (void *)&SwigClassSmartNodeManager);
  rb_undef_alloc_func(SwigClassSmartNodeManager.klass);
  rb_define_const(SwigClassSmartNodeManager.klass, "KInvalidReferenceId", SWIG_NewPointerObj(SWIG_as_voidptr(&FastNoise::SmartNodeManager::kInvalidReferenceId), SWIGTYPE_p_uint64_t, 0));
  rb_define_singleton_method(SwigClassSmartNodeManager.klass, "SetMemoryPoolSize", VALUEFUNC(_wrap_SmartNodeManager_SetMemoryPoolSize), -1);
  SwigClassSmartNodeManager.mark = 0;
  SwigClassSmartNodeManager.destroy = (void (*)(void *))free_FastNoise_SmartNodeManager;
  SwigClassSmartNodeManager.trackObjects = 0;

  SwigClassConstant.klass = rb_define_class_under(mFastnoise2, "Constant", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Constant, (void *)&SwigClassConstant);
  rb_undef_alloc_func(SwigClassConstant.klass);
  rb_define_method(SwigClassConstant.klass, "GetMetadata", VALUEFUNC(_wrap_Constant_GetMetadata), -1);
  rb_define_method(SwigClassConstant.klass, "SetValue", VALUEFUNC(_wrap_Constant_SetValue), -1);
  SwigClassConstant.mark = 0;
  SwigClassConstant.destroy = (void (*)(void *))free_FastNoise_Constant;
  SwigClassConstant.trackObjects = 0;

  SwigClassWhite.klass = rb_define_class_under(mFastnoise2, "White", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__White, (void *)&SwigClassWhite);
  rb_undef_alloc_func(SwigClassWhite.klass);
  rb_define_method(SwigClassWhite.klass, "GetMetadata", VALUEFUNC(_wrap_White_GetMetadata), -1);
  SwigClassWhite.mark = 0;
  SwigClassWhite.destroy = (void (*)(void *))free_FastNoise_White;
  SwigClassWhite.trackObjects = 0;

  SwigClassCheckerboard.klass = rb_define_class_under(mFastnoise2, "Checkerboard", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Checkerboard, (void *)&SwigClassCheckerboard);
  rb_undef_alloc_func(SwigClassCheckerboard.klass);
  rb_define_method(SwigClassCheckerboard.klass, "GetMetadata", VALUEFUNC(_wrap_Checkerboard_GetMetadata), -1);
  rb_define_method(SwigClassCheckerboard.klass, "SetSize", VALUEFUNC(_wrap_Checkerboard_SetSize), -1);
  SwigClassCheckerboard.mark = 0;
  SwigClassCheckerboard.destroy = (void (*)(void *))free_FastNoise_Checkerboard;
  SwigClassCheckerboard.trackObjects = 0;

  SwigClassSineWave.klass = rb_define_class_under(mFastnoise2, "SineWave", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__SineWave, (void *)&SwigClassSineWave);
  rb_undef_alloc_func(SwigClassSineWave.klass);
  rb_define_method(SwigClassSineWave.klass, "GetMetadata", VALUEFUNC(_wrap_SineWave_GetMetadata), -1);
  rb_define_method(SwigClassSineWave.klass, "SetScale", VALUEFUNC(_wrap_SineWave_SetScale), -1);
  SwigClassSineWave.mark = 0;
  SwigClassSineWave.destroy = (void (*)(void *))free_FastNoise_SineWave;
  SwigClassSineWave.trackObjects = 0;

  SwigClassPositionOutput.klass = rb_define_class_under(mFastnoise2, "PositionOutput", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__PositionOutput, (void *)&SwigClassPositionOutput);
  rb_undef_alloc_func(SwigClassPositionOutput.klass);
  rb_define_method(SwigClassPositionOutput.klass, "GetMetadata", VALUEFUNC(_wrap_PositionOutput_GetMetadata), -1);
  SwigClassPositionOutput.mark = 0;
  SwigClassPositionOutput.destroy = (void (*)(void *))free_FastNoise_PositionOutput;
  SwigClassPositionOutput.trackObjects = 0;

  SwigClassDistanceToPoint.klass = rb_define_class_under(mFastnoise2, "DistanceToPoint", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__DistanceToPoint, (void *)&SwigClassDistanceToPoint);
  rb_undef_alloc_func(SwigClassDistanceToPoint.klass);
  rb_define_method(SwigClassDistanceToPoint.klass, "GetMetadata", VALUEFUNC(_wrap_DistanceToPoint_GetMetadata), -1);
  rb_define_method(SwigClassDistanceToPoint.klass, "SetSource", VALUEFUNC(_wrap_DistanceToPoint_SetSource), -1);
  rb_define_method(SwigClassDistanceToPoint.klass, "SetDistanceFunction", VALUEFUNC(_wrap_DistanceToPoint_SetDistanceFunction), -1);
  SwigClassDistanceToPoint.mark = 0;
  SwigClassDistanceToPoint.destroy = (void (*)(void *))free_FastNoise_DistanceToPoint;
  SwigClassDistanceToPoint.trackObjects = 0;

  SwigClassOperatorSourceLHS.klass = rb_define_class_under(mFastnoise2, "OperatorSourceLHS", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__OperatorSourceLHS, (void *)&SwigClassOperatorSourceLHS);
  rb_define_alloc_func(SwigClassOperatorSourceLHS.klass, _wrap_OperatorSourceLHS_allocate);
  rb_define_method(SwigClassOperatorSourceLHS.klass, "SetLHS", VALUEFUNC(_wrap_OperatorSourceLHS_SetLHS), -1);
  rb_define_method(SwigClassOperatorSourceLHS.klass, "SetRHS", VALUEFUNC(_wrap_OperatorSourceLHS_SetRHS), -1);
  SwigClassOperatorSourceLHS.mark = 0;
  SwigClassOperatorSourceLHS.destroy = (void (*)(void *))free_FastNoise_OperatorSourceLHS;
  SwigClassOperatorSourceLHS.trackObjects = 0;

  SwigClassOperatorHybridLHS.klass = rb_define_class_under(mFastnoise2, "OperatorHybridLHS", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__OperatorHybridLHS, (void *)&SwigClassOperatorHybridLHS);
  rb_define_alloc_func(SwigClassOperatorHybridLHS.klass, _wrap_OperatorHybridLHS_allocate);
  rb_define_method(SwigClassOperatorHybridLHS.klass, "SetLHS", VALUEFUNC(_wrap_OperatorHybridLHS_SetLHS), -1);
  rb_define_method(SwigClassOperatorHybridLHS.klass, "SetRHS", VALUEFUNC(_wrap_OperatorHybridLHS_SetRHS), -1);
  SwigClassOperatorHybridLHS.mark = 0;
  SwigClassOperatorHybridLHS.destroy = (void (*)(void *))free_FastNoise_OperatorHybridLHS;
  SwigClassOperatorHybridLHS.trackObjects = 0;

  SwigClassAdd.klass = rb_define_class_under(mFastnoise2, "Add", ((swig_class *)SWIGTYPE_p_FastNoise__OperatorSourceLHS->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Add, (void *)&SwigClassAdd);
  rb_undef_alloc_func(SwigClassAdd.klass);
  rb_define_method(SwigClassAdd.klass, "GetMetadata", VALUEFUNC(_wrap_Add_GetMetadata), -1);
  SwigClassAdd.mark = 0;
  SwigClassAdd.destroy = (void (*)(void *))free_FastNoise_Add;
  SwigClassAdd.trackObjects = 0;

  SwigClassSubtract.klass = rb_define_class_under(mFastnoise2, "Subtract", ((swig_class *)SWIGTYPE_p_FastNoise__OperatorHybridLHS->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Subtract, (void *)&SwigClassSubtract);
  rb_undef_alloc_func(SwigClassSubtract.klass);
  rb_define_method(SwigClassSubtract.klass, "GetMetadata", VALUEFUNC(_wrap_Subtract_GetMetadata), -1);
  SwigClassSubtract.mark = 0;
  SwigClassSubtract.destroy = (void (*)(void *))free_FastNoise_Subtract;
  SwigClassSubtract.trackObjects = 0;

  SwigClassMultiply.klass = rb_define_class_under(mFastnoise2, "Multiply", ((swig_class *)SWIGTYPE_p_FastNoise__OperatorSourceLHS->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Multiply, (void *)&SwigClassMultiply);
  rb_undef_alloc_func(SwigClassMultiply.klass);
  rb_define_method(SwigClassMultiply.klass, "GetMetadata", VALUEFUNC(_wrap_Multiply_GetMetadata), -1);
  SwigClassMultiply.mark = 0;
  SwigClassMultiply.destroy = (void (*)(void *))free_FastNoise_Multiply;
  SwigClassMultiply.trackObjects = 0;

  SwigClassDivide.klass = rb_define_class_under(mFastnoise2, "Divide", ((swig_class *)SWIGTYPE_p_FastNoise__OperatorHybridLHS->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Divide, (void *)&SwigClassDivide);
  rb_undef_alloc_func(SwigClassDivide.klass);
  rb_define_method(SwigClassDivide.klass, "GetMetadata", VALUEFUNC(_wrap_Divide_GetMetadata), -1);
  SwigClassDivide.mark = 0;
  SwigClassDivide.destroy = (void (*)(void *))free_FastNoise_Divide;
  SwigClassDivide.trackObjects = 0;

  SwigClassMin.klass = rb_define_class_under(mFastnoise2, "Min", ((swig_class *)SWIGTYPE_p_FastNoise__OperatorSourceLHS->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Min, (void *)&SwigClassMin);
  rb_undef_alloc_func(SwigClassMin.klass);
  rb_define_method(SwigClassMin.klass, "GetMetadata", VALUEFUNC(_wrap_Min_GetMetadata), -1);
  SwigClassMin.mark = 0;
  SwigClassMin.destroy = (void (*)(void *))free_FastNoise_Min;
  SwigClassMin.trackObjects = 0;

  SwigClassMax.klass = rb_define_class_under(mFastnoise2, "Max", ((swig_class *)SWIGTYPE_p_FastNoise__OperatorSourceLHS->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Max, (void *)&SwigClassMax);
  rb_undef_alloc_func(SwigClassMax.klass);
  rb_define_method(SwigClassMax.klass, "GetMetadata", VALUEFUNC(_wrap_Max_GetMetadata), -1);
  SwigClassMax.mark = 0;
  SwigClassMax.destroy = (void (*)(void *))free_FastNoise_Max;
  SwigClassMax.trackObjects = 0;

  SwigClassPowFloat.klass = rb_define_class_under(mFastnoise2, "PowFloat", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__PowFloat, (void *)&SwigClassPowFloat);
  rb_undef_alloc_func(SwigClassPowFloat.klass);
  rb_define_method(SwigClassPowFloat.klass, "GetMetadata", VALUEFUNC(_wrap_PowFloat_GetMetadata), -1);
  rb_define_method(SwigClassPowFloat.klass, "SetValue", VALUEFUNC(_wrap_PowFloat_SetValue), -1);
  rb_define_method(SwigClassPowFloat.klass, "SetPow", VALUEFUNC(_wrap_PowFloat_SetPow), -1);
  SwigClassPowFloat.mark = 0;
  SwigClassPowFloat.destroy = (void (*)(void *))free_FastNoise_PowFloat;
  SwigClassPowFloat.trackObjects = 0;

  SwigClassPowInt.klass = rb_define_class_under(mFastnoise2, "PowInt", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__PowInt, (void *)&SwigClassPowInt);
  rb_undef_alloc_func(SwigClassPowInt.klass);
  rb_define_method(SwigClassPowInt.klass, "GetMetadata", VALUEFUNC(_wrap_PowInt_GetMetadata), -1);
  rb_define_method(SwigClassPowInt.klass, "SetValue", VALUEFUNC(_wrap_PowInt_SetValue), -1);
  rb_define_method(SwigClassPowInt.klass, "SetPow", VALUEFUNC(_wrap_PowInt_SetPow), -1);
  SwigClassPowInt.mark = 0;
  SwigClassPowInt.destroy = (void (*)(void *))free_FastNoise_PowInt;
  SwigClassPowInt.trackObjects = 0;

  SwigClassMinSmooth.klass = rb_define_class_under(mFastnoise2, "MinSmooth", ((swig_class *)SWIGTYPE_p_FastNoise__OperatorSourceLHS->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__MinSmooth, (void *)&SwigClassMinSmooth);
  rb_undef_alloc_func(SwigClassMinSmooth.klass);
  rb_define_method(SwigClassMinSmooth.klass, "GetMetadata", VALUEFUNC(_wrap_MinSmooth_GetMetadata), -1);
  rb_define_method(SwigClassMinSmooth.klass, "SetSmoothness", VALUEFUNC(_wrap_MinSmooth_SetSmoothness), -1);
  SwigClassMinSmooth.mark = 0;
  SwigClassMinSmooth.destroy = (void (*)(void *))free_FastNoise_MinSmooth;
  SwigClassMinSmooth.trackObjects = 0;

  SwigClassMaxSmooth.klass = rb_define_class_under(mFastnoise2, "MaxSmooth", ((swig_class *)SWIGTYPE_p_FastNoise__OperatorSourceLHS->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__MaxSmooth, (void *)&SwigClassMaxSmooth);
  rb_undef_alloc_func(SwigClassMaxSmooth.klass);
  rb_define_method(SwigClassMaxSmooth.klass, "GetMetadata", VALUEFUNC(_wrap_MaxSmooth_GetMetadata), -1);
  rb_define_method(SwigClassMaxSmooth.klass, "SetSmoothness", VALUEFUNC(_wrap_MaxSmooth_SetSmoothness), -1);
  SwigClassMaxSmooth.mark = 0;
  SwigClassMaxSmooth.destroy = (void (*)(void *))free_FastNoise_MaxSmooth;
  SwigClassMaxSmooth.trackObjects = 0;

  SwigClassFade.klass = rb_define_class_under(mFastnoise2, "Fade", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Fade, (void *)&SwigClassFade);
  rb_undef_alloc_func(SwigClassFade.klass);
  rb_define_method(SwigClassFade.klass, "GetMetadata", VALUEFUNC(_wrap_Fade_GetMetadata), -1);
  rb_define_method(SwigClassFade.klass, "SetA", VALUEFUNC(_wrap_Fade_SetA), -1);
  rb_define_method(SwigClassFade.klass, "SetB", VALUEFUNC(_wrap_Fade_SetB), -1);
  rb_define_method(SwigClassFade.klass, "SetFade", VALUEFUNC(_wrap_Fade_SetFade), -1);
  SwigClassFade.mark = 0;
  SwigClassFade.destroy = (void (*)(void *))free_FastNoise_Fade;
  SwigClassFade.trackObjects = 0;

  SwigClassCellular.klass = rb_define_class_under(mFastnoise2, "Cellular", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Cellular, (void *)&SwigClassCellular);
  rb_define_alloc_func(SwigClassCellular.klass, _wrap_Cellular_allocate);
  rb_define_method(SwigClassCellular.klass, "SetJitterModifier", VALUEFUNC(_wrap_Cellular_SetJitterModifier), -1);
  rb_define_method(SwigClassCellular.klass, "SetDistanceFunction", VALUEFUNC(_wrap_Cellular_SetDistanceFunction), -1);
  SwigClassCellular.mark = 0;
  SwigClassCellular.destroy = (void (*)(void *))free_FastNoise_Cellular;
  SwigClassCellular.trackObjects = 0;

  SwigClassCellularValue.klass = rb_define_class_under(mFastnoise2, "CellularValue", ((swig_class *)SWIGTYPE_p_FastNoise__Cellular->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__CellularValue, (void *)&SwigClassCellularValue);
  rb_undef_alloc_func(SwigClassCellularValue.klass);
  rb_define_method(SwigClassCellularValue.klass, "GetMetadata", VALUEFUNC(_wrap_CellularValue_GetMetadata), -1);
  rb_define_const(SwigClassCellularValue.klass, "KMaxDistanceCount", SWIG_From_int(static_cast<int>(FastNoise::CellularValue::kMaxDistanceCount)));
  rb_define_method(SwigClassCellularValue.klass, "SetValueIndex", VALUEFUNC(_wrap_CellularValue_SetValueIndex), -1);
  SwigClassCellularValue.mark = 0;
  SwigClassCellularValue.destroy = (void (*)(void *))free_FastNoise_CellularValue;
  SwigClassCellularValue.trackObjects = 0;

  SwigClassCellularDistance.klass = rb_define_class_under(mFastnoise2, "CellularDistance", ((swig_class *)SWIGTYPE_p_FastNoise__Cellular->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__CellularDistance, (void *)&SwigClassCellularDistance);
  rb_undef_alloc_func(SwigClassCellularDistance.klass);
  rb_define_method(SwigClassCellularDistance.klass, "GetMetadata", VALUEFUNC(_wrap_CellularDistance_GetMetadata), -1);
  rb_define_const(SwigClassCellularDistance.klass, "ReturnType_Index0", SWIG_From_int(static_cast<int>(FastNoise::CellularDistance::ReturnType::Index0)));
  rb_define_const(SwigClassCellularDistance.klass, "ReturnType_Index0Add1", SWIG_From_int(static_cast<int>(FastNoise::CellularDistance::ReturnType::Index0Add1)));
  rb_define_const(SwigClassCellularDistance.klass, "ReturnType_Index0Sub1", SWIG_From_int(static_cast<int>(FastNoise::CellularDistance::ReturnType::Index0Sub1)));
  rb_define_const(SwigClassCellularDistance.klass, "ReturnType_Index0Mul1", SWIG_From_int(static_cast<int>(FastNoise::CellularDistance::ReturnType::Index0Mul1)));
  rb_define_const(SwigClassCellularDistance.klass, "ReturnType_Index0Div1", SWIG_From_int(static_cast<int>(FastNoise::CellularDistance::ReturnType::Index0Div1)));
  rb_define_const(SwigClassCellularDistance.klass, "KMaxDistanceCount", SWIG_From_int(static_cast<int>(FastNoise::CellularDistance::kMaxDistanceCount)));
  rb_define_method(SwigClassCellularDistance.klass, "SetDistanceIndex0", VALUEFUNC(_wrap_CellularDistance_SetDistanceIndex0), -1);
  rb_define_method(SwigClassCellularDistance.klass, "SetDistanceIndex1", VALUEFUNC(_wrap_CellularDistance_SetDistanceIndex1), -1);
  rb_define_method(SwigClassCellularDistance.klass, "SetReturnType", VALUEFUNC(_wrap_CellularDistance_SetReturnType), -1);
  SwigClassCellularDistance.mark = 0;
  SwigClassCellularDistance.destroy = (void (*)(void *))free_FastNoise_CellularDistance;
  SwigClassCellularDistance.trackObjects = 0;

  SwigClassCellularLookup.klass = rb_define_class_under(mFastnoise2, "CellularLookup", ((swig_class *)SWIGTYPE_p_FastNoise__Cellular->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__CellularLookup, (void *)&SwigClassCellularLookup);
  rb_undef_alloc_func(SwigClassCellularLookup.klass);
  rb_define_method(SwigClassCellularLookup.klass, "GetMetadata", VALUEFUNC(_wrap_CellularLookup_GetMetadata), -1);
  rb_define_method(SwigClassCellularLookup.klass, "SetLookup", VALUEFUNC(_wrap_CellularLookup_SetLookup), -1);
  rb_define_method(SwigClassCellularLookup.klass, "SetLookupFrequency", VALUEFUNC(_wrap_CellularLookup_SetLookupFrequency), -1);
  SwigClassCellularLookup.mark = 0;
  SwigClassCellularLookup.destroy = (void (*)(void *))free_FastNoise_CellularLookup;
  SwigClassCellularLookup.trackObjects = 0;

  SwigClassDomainWarp.klass = rb_define_class_under(mFastnoise2, "DomainWarp", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__DomainWarp, (void *)&SwigClassDomainWarp);
  rb_define_alloc_func(SwigClassDomainWarp.klass, _wrap_DomainWarp_allocate);
  rb_define_method(SwigClassDomainWarp.klass, "SetSource", VALUEFUNC(_wrap_DomainWarp_SetSource), -1);
  rb_define_method(SwigClassDomainWarp.klass, "SetWarpAmplitude", VALUEFUNC(_wrap_DomainWarp_SetWarpAmplitude), -1);
  rb_define_method(SwigClassDomainWarp.klass, "SetWarpFrequency", VALUEFUNC(_wrap_DomainWarp_SetWarpFrequency), -1);
  SwigClassDomainWarp.mark = 0;
  SwigClassDomainWarp.destroy = (void (*)(void *))free_FastNoise_DomainWarp;
  SwigClassDomainWarp.trackObjects = 0;

  SwigClassDomainWarpGradient.klass = rb_define_class_under(mFastnoise2, "DomainWarpGradient", ((swig_class *)SWIGTYPE_p_FastNoise__DomainWarp->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__DomainWarpGradient, (void *)&SwigClassDomainWarpGradient);
  rb_undef_alloc_func(SwigClassDomainWarpGradient.klass);
  rb_define_method(SwigClassDomainWarpGradient.klass, "GetMetadata", VALUEFUNC(_wrap_DomainWarpGradient_GetMetadata), -1);
  SwigClassDomainWarpGradient.mark = 0;
  SwigClassDomainWarpGradient.destroy = (void (*)(void *))free_FastNoise_DomainWarpGradient;
  SwigClassDomainWarpGradient.trackObjects = 0;

  SwigClassDomainWarpFractalProgressive.klass = rb_define_class_under(mFastnoise2, "DomainWarpFractalProgressive", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__DomainWarpFractalProgressive, (void *)&SwigClassDomainWarpFractalProgressive);
  rb_undef_alloc_func(SwigClassDomainWarpFractalProgressive.klass);
  rb_define_method(SwigClassDomainWarpFractalProgressive.klass, "GetMetadata", VALUEFUNC(_wrap_DomainWarpFractalProgressive_GetMetadata), -1);
  SwigClassDomainWarpFractalProgressive.mark = 0;
  SwigClassDomainWarpFractalProgressive.destroy = (void (*)(void *))free_FastNoise_DomainWarpFractalProgressive;
  SwigClassDomainWarpFractalProgressive.trackObjects = 0;

  SwigClassDomainWarpFractalIndependant.klass = rb_define_class_under(mFastnoise2, "DomainWarpFractalIndependant", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__DomainWarpFractalIndependant, (void *)&SwigClassDomainWarpFractalIndependant);
  rb_undef_alloc_func(SwigClassDomainWarpFractalIndependant.klass);
  rb_define_method(SwigClassDomainWarpFractalIndependant.klass, "GetMetadata", VALUEFUNC(_wrap_DomainWarpFractalIndependant_GetMetadata), -1);
  SwigClassDomainWarpFractalIndependant.mark = 0;
  SwigClassDomainWarpFractalIndependant.destroy = (void (*)(void *))free_FastNoise_DomainWarpFractalIndependant;
  SwigClassDomainWarpFractalIndependant.trackObjects = 0;

  SwigClassFractalFBm.klass = rb_define_class_under(mFastnoise2, "FractalFBm", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__FractalFBm, (void *)&SwigClassFractalFBm);
  rb_undef_alloc_func(SwigClassFractalFBm.klass);
  rb_define_method(SwigClassFractalFBm.klass, "GetMetadata", VALUEFUNC(_wrap_FractalFBm_GetMetadata), -1);
  SwigClassFractalFBm.mark = 0;
  SwigClassFractalFBm.destroy = (void (*)(void *))free_FastNoise_FractalFBm;
  SwigClassFractalFBm.trackObjects = 0;

  SwigClassFractalRidged.klass = rb_define_class_under(mFastnoise2, "FractalRidged", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__FractalRidged, (void *)&SwigClassFractalRidged);
  rb_undef_alloc_func(SwigClassFractalRidged.klass);
  rb_define_method(SwigClassFractalRidged.klass, "GetMetadata", VALUEFUNC(_wrap_FractalRidged_GetMetadata), -1);
  SwigClassFractalRidged.mark = 0;
  SwigClassFractalRidged.destroy = (void (*)(void *))free_FastNoise_FractalRidged;
  SwigClassFractalRidged.trackObjects = 0;

  SwigClassFractalPingPong.klass = rb_define_class_under(mFastnoise2, "FractalPingPong", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__FractalPingPong, (void *)&SwigClassFractalPingPong);
  rb_undef_alloc_func(SwigClassFractalPingPong.klass);
  rb_define_method(SwigClassFractalPingPong.klass, "GetMetadata", VALUEFUNC(_wrap_FractalPingPong_GetMetadata), -1);
  rb_define_method(SwigClassFractalPingPong.klass, "SetPingPongStrength", VALUEFUNC(_wrap_FractalPingPong_SetPingPongStrength), -1);
  SwigClassFractalPingPong.mark = 0;
  SwigClassFractalPingPong.destroy = (void (*)(void *))free_FastNoise_FractalPingPong;
  SwigClassFractalPingPong.trackObjects = 0;
  rb_define_const(mFastnoise2, "Dim_X", SWIG_From_int(static_cast<int>(FastNoise::Dim::X)));
  rb_define_const(mFastnoise2, "Dim_Y", SWIG_From_int(static_cast<int>(FastNoise::Dim::Y)));
  rb_define_const(mFastnoise2, "Dim_Z", SWIG_From_int(static_cast<int>(FastNoise::Dim::Z)));
  rb_define_const(mFastnoise2, "Dim_W", SWIG_From_int(static_cast<int>(FastNoise::Dim::W)));
  rb_define_const(mFastnoise2, "Dim_Count", SWIG_From_int(static_cast<int>(FastNoise::Dim::Count)));
  rb_define_singleton_method(mFastnoise2, "kDim_Strings", VALUEFUNC(_wrap_kDim_Strings_get), 0);
  rb_define_const(mFastnoise2, "DistanceFunction_Euclidean", SWIG_From_int(static_cast<int>(FastNoise::DistanceFunction::Euclidean)));
  rb_define_const(mFastnoise2, "DistanceFunction_EuclideanSquared", SWIG_From_int(static_cast<int>(FastNoise::DistanceFunction::EuclideanSquared)));
  rb_define_const(mFastnoise2, "DistanceFunction_Manhattan", SWIG_From_int(static_cast<int>(FastNoise::DistanceFunction::Manhattan)));
  rb_define_const(mFastnoise2, "DistanceFunction_Hybrid", SWIG_From_int(static_cast<int>(FastNoise::DistanceFunction::Hybrid)));
  rb_define_const(mFastnoise2, "DistanceFunction_MaxAxis", SWIG_From_int(static_cast<int>(FastNoise::DistanceFunction::MaxAxis)));
  rb_define_singleton_method(mFastnoise2, "kDistanceFunction_Strings", VALUEFUNC(_wrap_kDistanceFunction_Strings_get), 0);

  SwigClassOutputMinMax.klass = rb_define_class_under(mFastnoise2, "OutputMinMax", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__OutputMinMax, (void *)&SwigClassOutputMinMax);
  rb_define_alloc_func(SwigClassOutputMinMax.klass, _wrap_OutputMinMax_allocate);
  rb_define_method(SwigClassOutputMinMax.klass, "initialize", VALUEFUNC(_wrap_new_OutputMinMax), -1);
  rb_define_method(SwigClassOutputMinMax.klass, "min=", VALUEFUNC(_wrap_OutputMinMax_min_set), -1);
  rb_define_method(SwigClassOutputMinMax.klass, "min", VALUEFUNC(_wrap_OutputMinMax_min_get), -1);
  rb_define_method(SwigClassOutputMinMax.klass, "max=", VALUEFUNC(_wrap_OutputMinMax_max_set), -1);
  rb_define_method(SwigClassOutputMinMax.klass, "max", VALUEFUNC(_wrap_OutputMinMax_max_get), -1);
  rb_define_method(SwigClassOutputMinMax.klass, "<<", VALUEFUNC(_wrap_OutputMinMax___lshift__), -1);
  SwigClassOutputMinMax.mark = 0;
  SwigClassOutputMinMax.destroy = (void (*)(void *))free_FastNoise_OutputMinMax;
  SwigClassOutputMinMax.trackObjects = 0;

  SwigClassGenerator.klass = rb_define_class_under(mFastnoise2, "Generator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Generator, (void *)&SwigClassGenerator);
  rb_undef_alloc_func(SwigClassGenerator.klass);
  rb_define_method(SwigClassGenerator.klass, "GetSIMDLevel", VALUEFUNC(_wrap_Generator_GetSIMDLevel), -1);
  rb_define_method(SwigClassGenerator.klass, "GetMetadata", VALUEFUNC(_wrap_Generator_GetMetadata), -1);
  rb_define_method(SwigClassGenerator.klass, "GenUniformGrid2D", VALUEFUNC(_wrap_Generator_GenUniformGrid2D), -1);
  rb_define_method(SwigClassGenerator.klass, "GenUniformGrid3D", VALUEFUNC(_wrap_Generator_GenUniformGrid3D), -1);
  rb_define_method(SwigClassGenerator.klass, "GenUniformGrid4D", VALUEFUNC(_wrap_Generator_GenUniformGrid4D), -1);
  rb_define_method(SwigClassGenerator.klass, "GenTileable2D", VALUEFUNC(_wrap_Generator_GenTileable2D), -1);
  rb_define_method(SwigClassGenerator.klass, "GenPositionArray2D", VALUEFUNC(_wrap_Generator_GenPositionArray2D), -1);
  rb_define_method(SwigClassGenerator.klass, "GenPositionArray3D", VALUEFUNC(_wrap_Generator_GenPositionArray3D), -1);
  rb_define_method(SwigClassGenerator.klass, "GenPositionArray4D", VALUEFUNC(_wrap_Generator_GenPositionArray4D), -1);
  rb_define_method(SwigClassGenerator.klass, "GenSingle2D", VALUEFUNC(_wrap_Generator_GenSingle2D), -1);
  rb_define_method(SwigClassGenerator.klass, "GenSingle3D", VALUEFUNC(_wrap_Generator_GenSingle3D), -1);
  rb_define_method(SwigClassGenerator.klass, "GenSingle4D", VALUEFUNC(_wrap_Generator_GenSingle4D), -1);
  SwigClassGenerator.mark = 0;
  SwigClassGenerator.destroy = (void (*)(void *))free_FastNoise_Generator;
  SwigClassGenerator.trackObjects = 0;

  SwigClassDomainScale.klass = rb_define_class_under(mFastnoise2, "DomainScale", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__DomainScale, (void *)&SwigClassDomainScale);
  rb_undef_alloc_func(SwigClassDomainScale.klass);
  rb_define_method(SwigClassDomainScale.klass, "GetMetadata", VALUEFUNC(_wrap_DomainScale_GetMetadata), -1);
  rb_define_method(SwigClassDomainScale.klass, "SetSource", VALUEFUNC(_wrap_DomainScale_SetSource), -1);
  rb_define_method(SwigClassDomainScale.klass, "SetScale", VALUEFUNC(_wrap_DomainScale_SetScale), -1);
  SwigClassDomainScale.mark = 0;
  SwigClassDomainScale.destroy = (void (*)(void *))free_FastNoise_DomainScale;
  SwigClassDomainScale.trackObjects = 0;

  SwigClassDomainOffset.klass = rb_define_class_under(mFastnoise2, "DomainOffset", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__DomainOffset, (void *)&SwigClassDomainOffset);
  rb_undef_alloc_func(SwigClassDomainOffset.klass);
  rb_define_method(SwigClassDomainOffset.klass, "GetMetadata", VALUEFUNC(_wrap_DomainOffset_GetMetadata), -1);
  rb_define_method(SwigClassDomainOffset.klass, "SetSource", VALUEFUNC(_wrap_DomainOffset_SetSource), -1);
  SwigClassDomainOffset.mark = 0;
  SwigClassDomainOffset.destroy = (void (*)(void *))free_FastNoise_DomainOffset;
  SwigClassDomainOffset.trackObjects = 0;

  SwigClassDomainRotate.klass = rb_define_class_under(mFastnoise2, "DomainRotate", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__DomainRotate, (void *)&SwigClassDomainRotate);
  rb_undef_alloc_func(SwigClassDomainRotate.klass);
  rb_define_method(SwigClassDomainRotate.klass, "GetMetadata", VALUEFUNC(_wrap_DomainRotate_GetMetadata), -1);
  rb_define_method(SwigClassDomainRotate.klass, "SetSource", VALUEFUNC(_wrap_DomainRotate_SetSource), -1);
  rb_define_method(SwigClassDomainRotate.klass, "SetYaw", VALUEFUNC(_wrap_DomainRotate_SetYaw), -1);
  rb_define_method(SwigClassDomainRotate.klass, "SetPitch", VALUEFUNC(_wrap_DomainRotate_SetPitch), -1);
  rb_define_method(SwigClassDomainRotate.klass, "SetRoll", VALUEFUNC(_wrap_DomainRotate_SetRoll), -1);
  SwigClassDomainRotate.mark = 0;
  SwigClassDomainRotate.destroy = (void (*)(void *))free_FastNoise_DomainRotate;
  SwigClassDomainRotate.trackObjects = 0;

  SwigClassSeedOffset.klass = rb_define_class_under(mFastnoise2, "SeedOffset", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__SeedOffset, (void *)&SwigClassSeedOffset);
  rb_undef_alloc_func(SwigClassSeedOffset.klass);
  rb_define_method(SwigClassSeedOffset.klass, "GetMetadata", VALUEFUNC(_wrap_SeedOffset_GetMetadata), -1);
  rb_define_method(SwigClassSeedOffset.klass, "SetSource", VALUEFUNC(_wrap_SeedOffset_SetSource), -1);
  rb_define_method(SwigClassSeedOffset.klass, "SetOffset", VALUEFUNC(_wrap_SeedOffset_SetOffset), -1);
  SwigClassSeedOffset.mark = 0;
  SwigClassSeedOffset.destroy = (void (*)(void *))free_FastNoise_SeedOffset;
  SwigClassSeedOffset.trackObjects = 0;

  SwigClassRemap.klass = rb_define_class_under(mFastnoise2, "Remap", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Remap, (void *)&SwigClassRemap);
  rb_undef_alloc_func(SwigClassRemap.klass);
  rb_define_method(SwigClassRemap.klass, "GetMetadata", VALUEFUNC(_wrap_Remap_GetMetadata), -1);
  rb_define_method(SwigClassRemap.klass, "SetSource", VALUEFUNC(_wrap_Remap_SetSource), -1);
  rb_define_method(SwigClassRemap.klass, "SetRemap", VALUEFUNC(_wrap_Remap_SetRemap), -1);
  SwigClassRemap.mark = 0;
  SwigClassRemap.destroy = (void (*)(void *))free_FastNoise_Remap;
  SwigClassRemap.trackObjects = 0;

  SwigClassConvertRGBA8.klass = rb_define_class_under(mFastnoise2, "ConvertRGBA8", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__ConvertRGBA8, (void *)&SwigClassConvertRGBA8);
  rb_undef_alloc_func(SwigClassConvertRGBA8.klass);
  rb_define_method(SwigClassConvertRGBA8.klass, "GetMetadata", VALUEFUNC(_wrap_ConvertRGBA8_GetMetadata), -1);
  rb_define_method(SwigClassConvertRGBA8.klass, "SetSource", VALUEFUNC(_wrap_ConvertRGBA8_SetSource), -1);
  rb_define_method(SwigClassConvertRGBA8.klass, "SetMinMax", VALUEFUNC(_wrap_ConvertRGBA8_SetMinMax), -1);
  SwigClassConvertRGBA8.mark = 0;
  SwigClassConvertRGBA8.destroy = (void (*)(void *))free_FastNoise_ConvertRGBA8;
  SwigClassConvertRGBA8.trackObjects = 0;

  SwigClassTerrace.klass = rb_define_class_under(mFastnoise2, "Terrace", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Terrace, (void *)&SwigClassTerrace);
  rb_undef_alloc_func(SwigClassTerrace.klass);
  rb_define_method(SwigClassTerrace.klass, "GetMetadata", VALUEFUNC(_wrap_Terrace_GetMetadata), -1);
  rb_define_method(SwigClassTerrace.klass, "SetSource", VALUEFUNC(_wrap_Terrace_SetSource), -1);
  rb_define_method(SwigClassTerrace.klass, "SetMultiplier", VALUEFUNC(_wrap_Terrace_SetMultiplier), -1);
  rb_define_method(SwigClassTerrace.klass, "SetSmoothness", VALUEFUNC(_wrap_Terrace_SetSmoothness), -1);
  SwigClassTerrace.mark = 0;
  SwigClassTerrace.destroy = (void (*)(void *))free_FastNoise_Terrace;
  SwigClassTerrace.trackObjects = 0;

  SwigClassDomainAxisScale.klass = rb_define_class_under(mFastnoise2, "DomainAxisScale", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__DomainAxisScale, (void *)&SwigClassDomainAxisScale);
  rb_undef_alloc_func(SwigClassDomainAxisScale.klass);
  rb_define_method(SwigClassDomainAxisScale.klass, "GetMetadata", VALUEFUNC(_wrap_DomainAxisScale_GetMetadata), -1);
  rb_define_method(SwigClassDomainAxisScale.klass, "SetSource", VALUEFUNC(_wrap_DomainAxisScale_SetSource), -1);
  SwigClassDomainAxisScale.mark = 0;
  SwigClassDomainAxisScale.destroy = (void (*)(void *))free_FastNoise_DomainAxisScale;
  SwigClassDomainAxisScale.trackObjects = 0;

  SwigClassAddDimension.klass = rb_define_class_under(mFastnoise2, "AddDimension", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__AddDimension, (void *)&SwigClassAddDimension);
  rb_undef_alloc_func(SwigClassAddDimension.klass);
  rb_define_method(SwigClassAddDimension.klass, "GetMetadata", VALUEFUNC(_wrap_AddDimension_GetMetadata), -1);
  rb_define_method(SwigClassAddDimension.klass, "SetSource", VALUEFUNC(_wrap_AddDimension_SetSource), -1);
  rb_define_method(SwigClassAddDimension.klass, "SetNewDimensionPosition", VALUEFUNC(_wrap_AddDimension_SetNewDimensionPosition), -1);
  SwigClassAddDimension.mark = 0;
  SwigClassAddDimension.destroy = (void (*)(void *))free_FastNoise_AddDimension;
  SwigClassAddDimension.trackObjects = 0;

  SwigClassRemoveDimension.klass = rb_define_class_under(mFastnoise2, "RemoveDimension", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__RemoveDimension, (void *)&SwigClassRemoveDimension);
  rb_undef_alloc_func(SwigClassRemoveDimension.klass);
  rb_define_method(SwigClassRemoveDimension.klass, "GetMetadata", VALUEFUNC(_wrap_RemoveDimension_GetMetadata), -1);
  rb_define_method(SwigClassRemoveDimension.klass, "SetSource", VALUEFUNC(_wrap_RemoveDimension_SetSource), -1);
  rb_define_method(SwigClassRemoveDimension.klass, "SetRemoveDimension", VALUEFUNC(_wrap_RemoveDimension_SetRemoveDimension), -1);
  SwigClassRemoveDimension.mark = 0;
  SwigClassRemoveDimension.destroy = (void (*)(void *))free_FastNoise_RemoveDimension;
  SwigClassRemoveDimension.trackObjects = 0;

  SwigClassGeneratorCache.klass = rb_define_class_under(mFastnoise2, "GeneratorCache", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__GeneratorCache, (void *)&SwigClassGeneratorCache);
  rb_undef_alloc_func(SwigClassGeneratorCache.klass);
  rb_define_method(SwigClassGeneratorCache.klass, "GetMetadata", VALUEFUNC(_wrap_GeneratorCache_GetMetadata), -1);
  rb_define_method(SwigClassGeneratorCache.klass, "SetSource", VALUEFUNC(_wrap_GeneratorCache_SetSource), -1);
  SwigClassGeneratorCache.mark = 0;
  SwigClassGeneratorCache.destroy = (void (*)(void *))free_FastNoise_GeneratorCache;
  SwigClassGeneratorCache.trackObjects = 0;

  SwigClassPerlin.klass = rb_define_class_under(mFastnoise2, "Perlin", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Perlin, (void *)&SwigClassPerlin);
  rb_undef_alloc_func(SwigClassPerlin.klass);
  rb_define_method(SwigClassPerlin.klass, "GetMetadata", VALUEFUNC(_wrap_Perlin_GetMetadata), -1);
  SwigClassPerlin.mark = 0;
  SwigClassPerlin.destroy = (void (*)(void *))free_FastNoise_Perlin;
  SwigClassPerlin.trackObjects = 0;

  SwigClassSimplex.klass = rb_define_class_under(mFastnoise2, "Simplex", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Simplex, (void *)&SwigClassSimplex);
  rb_undef_alloc_func(SwigClassSimplex.klass);
  rb_define_method(SwigClassSimplex.klass, "GetMetadata", VALUEFUNC(_wrap_Simplex_GetMetadata), -1);
  SwigClassSimplex.mark = 0;
  SwigClassSimplex.destroy = (void (*)(void *))free_FastNoise_Simplex;
  SwigClassSimplex.trackObjects = 0;

  SwigClassOpenSimplex2.klass = rb_define_class_under(mFastnoise2, "OpenSimplex2", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__OpenSimplex2, (void *)&SwigClassOpenSimplex2);
  rb_undef_alloc_func(SwigClassOpenSimplex2.klass);
  rb_define_method(SwigClassOpenSimplex2.klass, "GetMetadata", VALUEFUNC(_wrap_OpenSimplex2_GetMetadata), -1);
  SwigClassOpenSimplex2.mark = 0;
  SwigClassOpenSimplex2.destroy = (void (*)(void *))free_FastNoise_OpenSimplex2;
  SwigClassOpenSimplex2.trackObjects = 0;

  SwigClassValue.klass = rb_define_class_under(mFastnoise2, "Value", ((swig_class *)SWIGTYPE_p_FastNoise__Generator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_FastNoise__Value, (void *)&SwigClassValue);
  rb_undef_alloc_func(SwigClassValue.klass);
  rb_define_method(SwigClassValue.klass, "GetMetadata", VALUEFUNC(_wrap_Value_GetMetadata), -1);
  SwigClassValue.mark = 0;
  SwigClassValue.destroy = (void (*)(void *))free_FastNoise_Value;
  SwigClassValue.trackObjects = 0;
}
